
<div
  class="create_activity"
  x-cloak
  x-data={"{
    title_open: false, 
    open_boundaries: false,
    boundary_selected: '#{if e(assigns, :create_activity_type, nil) == :message, do: "message", else: ( if length(e(assigns, :to_circles, [])) >0, do: "mentions", else: "public" )}' 
  }"}>
  <Form 
    for={Bonfire.Social.Posts.LiveHandler.post_changeset(current_user(assigns))} 
    submit={if @create_activity_type==:message, do: "Bonfire.Social.Messages:send", else: "Bonfire.Social.Posts:post"} 
    change="validate"
    opts={ autocomplete: "off", "phx-target": "#smart_input"}
    class={if with_editor?(assigns), do: "form_with_editor", else: "form_with_textarea"}>

    <input type="hidden" 
      name="reply_to[reply_to_id]" 
      value={@reply_to_id} />
    <input type="hidden"  
      name="reply_to[thread_id]" 
      value={@thread_id} />
    <input type="hidden" 
      name={:create_activity_type}
      value={@create_activity_type} />
    <input 
      :for={circle <- e(assigns, :to_circles, [])} 
      type="hidden" 
      name="to_circles[]" 
      label={if is_tuple(circle), do: elem(circle, 0)} 
      value={if is_tuple(circle), do: elem(circle, 1), else: circle} 
    />

    <input 
      :for={file <- e(assigns, :uploaded_files, [])} 
      type="hidden" 
      name="files[]" 
      value={ulid(file)} 
    />

    <!-- <div 
      x-show="smart_input_prompt != 'Write something...' && ((reply_to_id && reply_to_id != '') || (smart_input_text && smart_input_text !=''))" 
      x-text= "smart_input_prompt" 
      class="block mb-2 text-sm truncate rounded shadow-lg alert alert-info ellipsis ">
      {@smart_input_prompt || ""}  
    </div> -->

    <Bonfire.UI.Social.ActivityLive 
      :if={@activity}
      id={"cap:" <> e(assigns, :activity, :id, "")}
      activity={@activity}
      object={@object}
      class={@replied_activity_class}
      showing_within={:smart_input}
    />
    
    <div class={@smart_input_class}>
      <div class="relative">
        <Inputs for={:post_content}>
          <div
            id="textarea_wrapper"
            class="">
            <div x-show="title_open" x-transition>
              <label for="title" class="sr-only">{l "Title"}</label>
              <Field name={:name}>
                <TextInput
                  opts={placeholder: "Enter a title"}
                  class="block w-full border-0 pt-2.5 text-lg font-medium placeholder-base-content placeholder-opacity-70 bg-base-100 text-base-content focus:ring-0 border-b border-base-300" 
                  />
              </Field>
            </div>  
            <label for="description" class="sr-only">{l "Description"}</label>
            <Field 
              class="h-full min-h-full" name={:html_body}>
              <!-- <Label :if={@smart_input_text && @smart_input_text !="" && @smart_input_prompt} class="mb-2 alert alert-info">{@smart_input_prompt}</Label> -->    
              <Bonfire.Editor.Ck.Bubble 
                  :if={with_editor?(assigns)}
                  field_name="post[post_content][html_body]"
                  textarea_class={@textarea_class}
                  placeholder={e(assigns, :smart_input_prompt, l "Write something...")}
                  content={@smart_input_text}
                  insert_text={@insert_text}
                /> 
                <TextArea
                  :if={!with_editor?(assigns)}
                  opts={
                    value: @smart_input_text,
                    placeholder: e(assigns, :smart_input_prompt, l "Write something..."),
                    "x-model": "smart_input_text"
                  }
                  class={@textarea_class}
                />
            </Field>
          </div>
        </Inputs>
        <div class="">
          <Bonfire.UI.Social.BoundariesLive
            :if={e(assigns, :showing_within, nil) != :message}
            to_circles={e(assigns, :to_circles, [])}
           />
          <div class="flex items-center justify-between p-2 space-x-2 rounded-b bg-base-100 sm:px-3">
            <div class="flex items-center flex-1 space-x-3">
              <Bonfire.UI.Social.UploadFilesLive
                :if={module_enabled?(Bonfire.Files)}
                uploads={e(assigns, :uploads, nil)}
                uploaded_files={e(assigns, :uploaded_files, [])}
              />
              <div 
                data-tip="Add a content warning" 
                class="relative z-20 flex items-center tooltip tooltip-bottom">
                <button
                  :if={Bonfire.Common.Config.get([:ui, :smart_input, :cw], []) == true}
                  type="button"
                  @click="title_open = !title_open"
                  :class="{'text-primary-content bg-primary' : title_open}"
                  class="btn btn-ghost btn-square btn-sm">
                  <span class="text-xs font-medium text-base-content text-opacity-70">CW</span>
                </button>
              </div>
              <Bonfire.UI.Social.BoundariesLive
                :if={e(assigns, :showing_within, nil) == :message}
                showing_within={:message}
                to_circles={e(assigns, :to_circles, [])}
              />
              <!-- <div 
                data-tip="Full-screen mode" 
                :if={@create_activity_type != :message}
                class="relative z-20 flex items-center tooltip tooltip-bottom">
                <LivePatch
                  to="/write"
                  class="btn btn-ghost btn-square btn-sm">
                  <Solid.EyeIcon class="w-4 h-4 text-opacity-70 text-base-content" />
                </LivePatch>
              </div> -->

            </div>

            <button type="submit" class="capitalize btn-sm justify-self-end btn btn-primary">
              <!-- {if e(assigns, :create_activity_type, nil) == :message, do: l "Message", else: l "Post"} -->
              {l "Post"}
            </button>
          </div>
        </div>
      </div>
    </div>
  </Form>
</div>
