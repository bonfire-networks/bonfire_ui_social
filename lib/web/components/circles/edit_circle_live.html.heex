

<h2><%= e(@circle, :named, :name, "Edit Circle") %></h2>
<div
  x-cloak
  class="drag_drop"
  x-data="{ adding: false, removing: false }">
    <div class="drag_drop__container drag_drop__container__from">
        <h3 class="drag_drop__title">Suggestions</h3>
        <ul
            id="circle_suggestions"
            class="drag_drop__items"
            :class="{ 'drag_drop__items__removing': removing }"
            x-on:drop="removing = false"
            x-on:drop.prevent="
                const target = event.target.closest('ul');
                const element = document.getElementById(event.dataTransfer.getData('text/plain'));
                target.appendChild(element);
                const up = document.getElementById('circle_changed');
                //up.value = up.value + 1;
                createEvent = function(name) { // tell LV that the form changed
                  const e = document.createEvent('Event');
                  e.initEvent(name, true, true);
                  return e;
                }
                up.dispatchEvent(createEvent('input'));
            "
            x-on:dragover.prevent="removing = true"
            x-on:dragleave.prevent="removing = false">
            <!-- loop through the items -->


            <%= for suggested <- @followed do %>
              <li id={"item-"<> suggested.id }
                class="drag_drop__item px-3 py-4"
                :class="{ 'drag_drop__iter__dragging': dragging }"
                x-on:dragstart.self="
                    dragging = true;
                    event.dataTransfer.effectAllowed='move';
                    event.dataTransfer.setData('text/plain', event.target.id);
                "
                x-on:dragend="dragging = false"
                x-cloak
                x-data="{ dragging: false }"
                draggable="true">

                <input type="hidden" name={"circle[encircle][#{suggested.id}][circle_id]"} value={e(@circle, :id, "")}>
                <input type="hidden" name={"circle[encircle][#{suggested.id}][subject_id]"} value={e(suggested, :followed_profile, :id, "")}>

                <%= live_component(@socket, Bonfire.UI.Social.ProfileItemLive, assigns |> assigns_merge(%{profile: e(suggested, :followed_profile, nil), character: e(suggested, :followed_character, nil)})) %>

                <span class="to inline-flex items-center shadow-sm px-2.5 py-0.5 border border-gray-300 text-sm leading-5 font-medium rounded-full text-primary-content-700 bg-base-100 hover:bg-neutral hover:bg-opacity-30 " @click="
                const target = document.getElementById('circle_members');
                const element = event.target.closest('li');
                target.appendChild(element);
                ">+</span>
                <span class="from inline-flex items-center shadow-sm px-2.5 py-0.5 border border-gray-300 text-sm leading-5 font-medium rounded-full text-primary-content-700 bg-base-100 hover:bg-neutral hover:bg-opacity-30 " @click="
                const target = document.getElementById('circle_suggestions');
                const element = event.target.closest('li');
                target.appendChild(element);
                ">-</span>

              </li>
            <% end %>

            <%= for suggested <- @followers do %>
              <li id={"item-"<> suggested.id }
                class="drag_drop__item px-3 py-4"
                :class="{ 'drag_drop__iter__dragging': dragging }"
                x-on:dragstart.self="
                    dragging = true;
                    event.dataTransfer.effectAllowed='move';
                    event.dataTransfer.setData('text/plain', event.target.id);
                "
                x-on:dragend="dragging = false"
                x-cloak
                x-data="{ dragging: false }"
                draggable="true">

                <input type="hidden" name={"circle[encircle][#{suggested.id}][circle_id]"} value={e(@circle, :id, "")}>
                <input type="hidden" name={"circle[encircle][#{suggested.id}][subject_id]"} value={ e(suggested, :follower_profile, :id, "")}>

                <%= live_component(@socket, Bonfire.UI.Social.ProfileItemLive, assigns |> assigns_merge(%{profile: e(suggested, :follower_profile, nil), character: e(suggested, :follower_character, nil)})) %>

                <span class="to inline-flex items-center shadow-sm px-2.5 py-0.5 border border-gray-300 text-sm leading-5 font-medium rounded-full text-primary-content-700 bg-base-100 hover:bg-neutral hover:bg-opacity-30 " @click="
                const target = document.getElementById('circle_members');
                const element = event.target.closest('li');
                target.appendChild(element);
                ">+</span>
                <span class="from inline-flex items-center shadow-sm px-2.5 py-0.5 border border-gray-300 text-sm leading-5 font-medium rounded-full text-primary-content-700 bg-base-100 hover:bg-neutral hover:bg-opacity-30 " @click="
                const target = document.getElementById('circle_suggestions');
                const element = event.target.closest('li');
                target.appendChild(element);
                ">-</span>

              </li>
            <% end %>



        </ul>
    </div>

    <div class="drag_drop__divider">â‡„</div>

    <div class="drag_drop__container drag_drop__container__to">
        <h3 class="drag_drop__title">Circle Members</h3>
        <form phx-change="Bonfire.Me.Circles:member_update">
        <input type="hidden" name="circle[id]" value={e(@circle, :id, "")}>
        <input type="hidden" id="circle_changed" name="circle_changed" value="0">

        <ul
            id="circle_members"
            class="drag_drop__items"
            :class="{ 'drag_drop__items__adding': adding }"
            x-on:drop="adding = false"
            x-on:drop.prevent="
                const target = event.target.closest('ul');
                const element = document.getElementById(event.dataTransfer.getData('text/plain'));
                target.appendChild(element);
                const up = document.getElementById('circle_changed');
                //up.value = up.value + 1;
                createEvent = function(name) { // tell LV that the form changed
                  const e = document.createEvent('Event');
                  e.initEvent(name, true, true);
                  return e;
                }
                up.dispatchEvent(createEvent('input'));
            "
            x-on:dragover.prevent="adding = true"
            x-on:dragleave.prevent="adding = false">
            <!-- loop through current circle members -->

            <%= for member <- e(@circle, :encircles, []) do %>
            <% IO.inspect(member: member) %>

              <li id={"item-"<> member.id }
                class="drag_drop__item px-3 py-4"
                :class="{ 'drag_drop__iter__dragging': dragging }"
                x-on:dragstart.self="
                    dragging = true;
                    event.dataTransfer.effectAllowed='move';
                    event.dataTransfer.setData('text/plain', event.target.id);
                "
                x-on:dragend="dragging = false"
                x-cloak
                x-data="{ dragging: false }"
                draggable="true">

                <input type="hidden" name={"circle[encircle][#{member.id}][circle_id]"} value={e(@circle, :id, "")}>
                <input type="hidden" name={"circle[encircle][#{member.id}][subject_id]"} value={e(member, :subject_id, "")}>
                <%= live_component(@socket, Bonfire.UI.Social.ProfileItemLive, assigns |> assigns_merge(%{profile: e(member, :subject, :profile, nil), character: e(member, :subject, :character, nil)})) %>

                <span class="to inline-flex items-center shadow-sm px-2.5 py-0.5 border border-gray-300 text-sm leading-5 font-medium rounded-full text-primary-content-700 bg-base-100 hover:bg-neutral hover:bg-opacity-30 " @click="
                const target = document.getElementById('circle_members');
                const element = event.target.closest('li');
                target.appendChild(element);
                ">+</span>
                <span class="from inline-flex items-center shadow-sm px-2.5 py-0.5 border border-gray-300 text-sm leading-5 font-medium rounded-full text-primary-content-700 bg-base-100 hover:bg-neutral hover:bg-opacity-30 " @click="
                const target = document.getElementById('circle_suggestions');
                const element = event.target.closest('li');
                target.appendChild(element);
                ">-</span>

              </li>
            <% end %>

        </ul>
        </form>

    </div>
</div>


<style>
.drag_drop {
  display: flex;
  max-width: 760px;
  padding: 20px;
  margin: 0 auto;
}
.drag_drop__container {
  position: relative;
  overflow: hidden;
  width: 50%;
  border: 1px solid #ccc;
  border-radius: 10px;
}
.drag_drop__divider {
  padding: 10px;
  font-size: 20px;
  align-self: center;
}
.drag_drop__title {
  padding: 15px 20px;
  font-size: 20px;
  background: #ddd;
}
.drag_drop__items {
  position: relative;
  overflow: hidden;
  height: 100%;
  min-height: 150px;
  margin: 0 -1px;
  padding-bottom: 40px;
  border-top: 1px solid #ccc;
}
.drag_drop__items__adding {
  background-color: #9AE6B4;
}
.drag_drop__items__removing {
  background-color: #FBD38D;
}
.drag_drop__item {
  padding: 15px 20px;
  border: 1px solid #ccc;
  border-top: 0;
  line-height: 1;
  cursor: move;
  background-color: #fff;
}
.drag_drop__item:hover {
  background-color: #eee;
}
.drag_drop__iter__dragging {
  color: #ccc !important;
  background-color: #fff !important;
}

.drag_drop__container__to span.to, .drag_drop__container__from span.from  {
  display: none;
}

</style>
