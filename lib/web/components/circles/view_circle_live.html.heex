<div class="px-4 py-6 sm:p-6 lg:pb-8">
  <div class="sticky top-0">
    <%= live_component(@socket, Bonfire.UI.Social.SettingsViewLive.SettingsHeaderLive, assigns_clean(assigns)) %>
    <div class="mt-6">
      <div class="flex items-center border-b-4 pb-10">
        <div class="shadow-2xl ring-4 ring-white flex-shrink-0 flex items-center justify-center w-24 h-24 rounded-full bg-pink-600 text-white text-sm font-medium">
            GA
        </div>
        <div class="ml-4 flex flex-col">
            <h3 class="text-2xl font-bold text-primary-content-800"><%= e(@circle, :named, :name, "Circle name") %></h3>
            <p class="text-base font-regular text-primary-content-800 mt-1">This is a sample description to help remember what this circle is about.</p>
            <div class="flex items-center mt-3 space-x-3">
              <button class="btn btn-primary w-max inline-flex items-center"><svg class="w-5 h-5 text-primary-content-100 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>Delete</button>
            </div>
        </div>
      </div>
    </div>
  </div>
  <div class="mt-8">

  <div class="block"x-cloak  x-data="{ adding: false, removing: false }">

    <h3 class="font-sm mb-2 text-medium text-primary-content-800">Circle Members</h3>
    <div class="overflow-hidden relative border rounded-lg  drag_drop__container__to">
        <form phx-change="Bonfire.Me.Circles:member_update">
        <input type="hidden" name="circle[id]" value={e(@circle, :id, "")}>
        <input type="hidden" id="circle_changed" name="circle_changed" value="0">

        <ul
            id="circle_members"
            class="grid grid-flow-col grid-cols-5 p-4 gap-4"
            :class="{ 'bg-secondary': adding }"
            x-on:drop="adding = false"
            x-on:drop.prevent="
                const target = event.target.closest('ul');
                const element = document.getElementById(event.dataTransfer.getData('text/plain'));
                target.appendChild(element);
                const up = document.getElementById('circle_changed');
                //up.value = up.value + 1;
                createEvent = function(name) { // tell LV that the form changed
                  const e = document.createEvent('Event');
                  e.initEvent(name, true, true);
                  return e;
                }
                up.dispatchEvent(createEvent('input'));
            "
            x-on:dragover.prevent="adding = true"
            x-on:dragleave.prevent="adding = false">

             <%# loop through current circle members  %>

            <%= for member <- e(@circle, :encircles, []) do %>
            <%# IO.inspect(member: member) %>

              <li id={"item-"<> member.id }
                class="p-2 flex"
                :class="{ 'bg-base-2000': dragging }"
                x-on:dragstart.self="
                    dragging = true;
                    event.dataTransfer.effectAllowed='move';
                    event.dataTransfer.setData('text/plain', event.target.id);
                "
                x-cloak
                x-on:dragend="dragging = false"
                x-data="{ dragging: false }"
                draggable="true">

                <input type="hidden" name={"circle[encircle][#{member.id}][circle_id]"} value={e(@circle, :id, "")}>
                <input type="hidden" name={"circle[encircle][#{member.id}][subject_id]"} value={e(member, :subject_id, "")}>
                <div class="flex-1">
                  <%= live_component(@socket, Bonfire.UI.Social.ProfileItemLive, assigns |> assigns_merge(%{profile: e(member, :subject, :profile, nil), character: e(member, :subject, :character, nil)})) %>
                </div>
                <div class="flex mr-1">
                  <span
                    class="to flex items-center"
                    @click="
                    const target = document.getElementById('circle_members');
                    const element = event.target.closest('li');
                    target.appendChild(element);
                    ">
                      <svg class="w-6 h-6 text-primary-content-600 cursor-pointer hover:text-primary-content-800" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd"></path></svg>
                    </span>
                  <span
                    class="from flex items-center"
                    @click="
                  const target = document.getElementById('circle_suggestions');
                  const element = event.target.closest('li');
                  target.appendChild(element);
                  ">
                    <svg class="w-6 h-6 text-primary-content-600 cursor-pointer hover:text-primary-content-800" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path></svg>
                  </span>
                </div>
              </li>
            <% end %>

        </ul>
        </form>

    </div>




    <h3 class="font-sm mt-4 mb-2 text-medium text-primary-content-800">Suggestions</h3>
    <div class="overflow-hidden relative border rounded-lg drag_drop__container__from">
      <%=if length(@followed)>0 || length(@followers)>0 do %>
        <ul
            id="circle_suggestions"
            class="flex flex-col divide-y-2"
            :class="{ 'drag_drop__items__removing': removing }"
            x-on:drop="removing = false"
            x-on:drop.prevent="
                const target = event.target.closest('ul');
                const element = document.getElementById(event.dataTransfer.getData('text/plain'));
                target.appendChild(element);
                const up = document.getElementById('circle_changed');
                //up.value = up.value + 1;
                createEvent = function(name) { // tell LV that the form changed
                  const e = document.createEvent('Event');
                  e.initEvent(name, true, true);
                  return e;
                }
                up.dispatchEvent(createEvent('input'));
            "
            x-on:dragover.prevent="removing = true"
            x-on:dragleave.prevent="removing = false">

             <%# loop through people that can be added  %>

            <%= for suggested <- @followed do %>
              <li id={"item-"<> suggested.id }
                class="p-2 flex"
                :class="{ 'drag_drop__iter__dragging': dragging }"
                x-on:dragstart.self="
                    dragging = true;
                    event.dataTransfer.effectAllowed='move';
                    event.dataTransfer.setData('text/plain', event.target.id);
                "
                x-on:dragend="dragging = false"
                x-cloak
                x-data="{ dragging: false }"
                draggable="true">

                <input type="hidden" name={"circle[encircle][#{suggested.id}][circle_id]"} value={e(@circle, :id, "")}>
                <input type="hidden" name={"circle[encircle][#{suggested.id}][subject_id]"} value={e(suggested, :followed_profile, :id, "")}>
                <div class="flex-1">
                  <%= live_component(@socket, Bonfire.UI.Social.ProfileItemLive, assigns |> assigns_merge(%{profile: e(suggested, :followed_profile, nil), character: e(suggested, :followed_character, nil)})) %>
                </div>
                  <div class="flex mr-1">
                    <span
                      class="to flex items-center"
                      @click="
                      const target = document.getElementById('circle_members');
                      const element = event.target.closest('li');
                      target.appendChild(element);
                      ">
                        <svg class="w-6 h-6 text-primary-content-600 cursor-pointer hover:text-primary-content-800" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd"></path></svg>
                      </span>
                    <span
                    class="from flex items-center"
                    @click="
                      const target = document.getElementById('circle_suggestions');
                      const element = event.target.closest('li');
                      target.appendChild(element);
                    ">
                      <svg class="w-6 h-6 text-primary-content-600 cursor-pointer hover:text-primary-content-800" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path></svg>
                    </span>
                  </div>
              </li>
            <% end %>

            <%= for suggested <- @followers do %>
              <li id={"item-"<> suggested.id }
                class="p-2 flex"
                :class="{ 'drag_drop__iter__dragging': dragging }"
                x-on:dragstart.self="
                    dragging = true;
                    event.dataTransfer.effectAllowed='move';
                    event.dataTransfer.setData('text/plain', event.target.id);
                "
                x-on:dragend="dragging = false"
                x-cloak
                x-data="{ dragging: false }"
                draggable="true">

                <input type="hidden" name={"circle[encircle][#{suggested.id}][circle_id]"} value={e(@circle, :id, "")}>
                <input type="hidden" name={"circle[encircle][#{suggested.id}][subject_id]"} value={ e(suggested, :follower_profile, :id, "")}>
                <div class="flex-1">
                  <%= live_component(@socket, Bonfire.UI.Social.ProfileItemLive, assigns |> assigns_merge(%{profile: e(suggested, :follower_profile, nil), character: e(suggested, :follower_character, nil)})) %>
                </div>
                <span class="to inline-flex items-center shadow-sm px-2.5 py-0.5 border border-gray-300 text-sm leading-5 font-medium rounded-full text-primary-content-700 bg-base-100 hover:bg-neutral hover:bg-opacity-30 " @click="
                const target = document.getElementById('circle_members');
                const element = event.target.closest('li');
                target.appendChild(element);
                ">+</span>
                <span class="from inline-flex items-center shadow-sm px-2.5 py-0.5 border border-gray-300 text-sm leading-5 font-medium rounded-full text-primary-content-700 bg-base-100 hover:bg-neutral hover:bg-opacity-30 " @click="
                const target = document.getElementById('circle_suggestions');
                const element = event.target.closest('li');
                target.appendChild(element);
                ">-</span>

              </li>
            <% end %>

        </ul>

        <% else %>
          <div id="no_suggestions">Follow some people first...</div>
        <% end %>

    </div>


</div>



  </div>
</div>



<style>
#circle_members li {
  border-radius: 100px;
  background: rgb(224, 231, 255);
}

.drag_drop__container__to span.to, .drag_drop__container__from span.from  {
  display: none;
}

</style>
