{#case Media.media_url(@media)}
  {#match media_url}
    {#case e(@media.metadata, "download_url", nil)}
      {#match download_url}
        {#case e(debug(@metadata, "paper_meta"), "DOI", nil) || e(@metadata, "identifiers", "doi", nil) ||
            e(@metadata, "citation_doi", nil) ||
            extract_doi_from_orcid(@metadata) ||
            e(@metadata, "url", "value", nil) || e(@metadata, "url", nil) ||
            e(@media.metadata, "facebook", "url", nil)}
          {#match doi}
            <!-- <code>{inspect(@media.metadata, pretty: true)}</code> -->
            <div class={
              "w-full media_container text-base-content",
              @css_borders || "border border-base-content/10 rounded-lg p-2",
              "p-4 bg-base-100 ": @showing_within != :media
            }>
              <div class="relative w-full">
                <div class="mb-1">
                  <span class="text-sm badge badge-accent rounded bg-accent/30 border-none !text-accent capitalize">{paper_type(@metadata)}</span>

                  <span class="text-sm text-base-content/70 mb-1">{e(@metadata, "journal-title", "value", nil) || e(@metadata, "citation_journal_title", nil) ||
                      e(@metadata, "publisher", "name", nil) ||
                      e(@metadata, "publisher", nil) || e(@metadata, "publicationTitle", nil) ||
                      e(@metadata, "isPartOf", "name", nil) ||
                      e(@metadata, "container-title", nil)}
                  </span>
                </div>

                <div class="font-semibold">
                  {e(@metadata, "citation_title", nil) || Bonfire.Files.Media.media_label(@media)}
                </div>

                <div class="flex flex-wrap mt-3 gap-2 text-sm text-base-content/80">
                  {#for {author, i} <-
                      Enum.with_index(
                        List.wrap(
                          e(@metadata, "author", nil) || e(@metadata, "creators", nil) ||
                            e(@metadata, "source", "source-name", "value", nil) ||
                            e(@metadata, "citation_author", nil)
                        )
                      )}{if i != 0, do: ","}
                    {e(author, "given", nil) || e(author, "firstName", nil)}
                    {e(author, "family", nil) || e(author, "lastName", nil) || e(author, "name", nil) ||
                      if(is_binary(author), do: author)}{/for}

                  {#case (e(@metadata, "datePublished", nil) ||
                       e(@metadata, "publication-date", nil) || e(@metadata, "date", nil) ||
                       e(@metadata, "created", "date-time", nil) || e(@metadata, "DC.date", nil) ||
                       e(@metadata, "citation_publication_date", nil))
                    |> debug("dattte")}
                    {#match nil}
                    {#match published}
                      <span class="text-base-content/70 text-sm flex items-center gap-2">
                        <!-- <#Icon iconify="material-symbols:date-range-outline" class="w-4 h-4 text-base-content/70" /> -->
                        <span class="font-medium">{published |> DatesTimes.format_date(format: "MMMM d, Y")}</span>
                      </span>
                  {/case}

                  <div
                    :if={doi || String.contains?(e(@media, :path, nil), "doi.org/")}
                    class="text-base-content/70 text-sm flex items-center gap-2"
                  >
                    <span>
                      {#case doi || e(@media, :path, nil)}
                        {#match "https://doi.org/" <> doi_id}
                          <a target="_blank" class="link" href={"https://doi.org/#{doi_id}"}>doi:{doi_id}</a>
                        {#match "https://dx.doi.org/" <> doi_id}
                          <a target="_blank" class="link" href={"https://doi.org/#{doi_id}"}>doi:{doi_id}</a>
                        {#match "http" <> _}
                          <!-- <a target="_blank" class="link" href={doi}>{doi}</a> -->
                        {#match "doi:" <> doi_id}
                          <a target="_blank" class="link" href={"https://doi.org/#{doi_id}"}>doi"{doi_id}</a>
                        {#match _ when is_binary(doi)}
                          <a target="_blank" class="link" href={"https://doi.org/#{doi}"}>doi:{doi}</a>
                        {#match _}
                          <!-- no DOI match -->
                      {/case}
                    </span>
                  </div>
                </div>
                <div class="text-sm text-left">
                  <div class="">
                    {#case List.wrap(e(@metadata, "subject", nil) || e(@metadata, "dc.subject", nil))}
                      {#match []}
                      {#match subjects}
                        <div class="flex mt-2 flex-wrap gap-2">
                          {#for subject <- subjects}
                            <span class="text-sm badge badge-info bg-info/30 border-none !text-info">#{subject}</span>
                          {/for}
                        </div>
                    {/case}

                    <div class={
                      "mt-2 text-sm text-justify text-base-content/90 break-words",
                      "line-clamp-5": @showing_within in [:feed, :profile]
                    }>
                      {raw(
                        e(@metadata, "citation_abstract", nil) || e(@metadata, "abstractNote", nil) ||
                          Bonfire.Files.Media.description(@media) |> Text.text_only()
                      )}
                    </div>
                    {!-- {e(@metadata, "subject", nil)} --}
                  </div>
                </div>
              </div>

              <div class="flex gap-2 items-center mt-4">
                <a
                  :if={download_url && download_url != media_url}
                  href={download_url}
                  class="btn btn-secondary btn-soft btn-sm flex-1"
                  target="_blank"
                >
                  <#Icon iconify="pajamas:import" class="w-4 h-4 opacity-70" />
                  <span>{l("Download")}</span>
                </a>

                {#if is_orcid_work_url?(media_url)}
                  <!-- Special handling for ORCID work URLs -->
                  {#case doi}
                    {#match doi_value when is_binary(doi_value)}
                      <LinkLive
                        to={format_doi_url(doi_value)}
                        class="btn btn-sm btn-soft flex-1"
                        target="_blank"
                      >
                        <#Icon iconify="heroicons-outline:external-link" class="w-4 h-4 opacity-70" />
                        <span>{l("Read paper")}</span>
                      </LinkLive>
                    {#match _}
                      <!-- No DOI available for ORCID work -->
                      <div class="text-sm text-base-content/70 italic p-2 text-center">
                        {l("Paper link not available")}
                      </div>
                  {/case}
                {#elseif is_binary(media_url) and not String.starts_with?(media_url, "doi:") and URIs.valid_url?(media_url)}
                  <!-- Regular URL -->
                  <LinkLive
                    to={media_url}
                    class="btn btn-sm btn-soft flex-1"
                    target="_blank"
                  >
                    <#Icon iconify="heroicons-outline:external-link" class="w-4 h-4 opacity-70" />
                    <span>{l("Read paper")}</span>
                  </LinkLive>
                {#else}
                  <!-- Invalid or DOI-only URL -->
                {/if}
              </div>
            </div>
        {/case}
    {/case}
{/case}