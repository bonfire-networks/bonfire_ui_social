<div
  :if={@current_user != nil and @showing_within not in [:notifications, :search]}
  aria-haspopup="true"
  class={
    "dropdown feed_activity relative",
    "dropdown-end": @showing_within != :widget,
    "dropdown-top dropdown-end showing_within:widget": @showing_within == :widget
  }
>
  <button tabindex="0" class="btn btn-ghost btn-square btn-xs">
    <Icon solid="DotsVertical" class="w-4 h-4 text-base-content/70" />
  </button>
  <ul
    tabindex="0"
    class="!block w-60 z-[910] relative shadow menu menu-compact dropdown-content bg-neutral rounded dropdown_actions"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="more-menu"
  >
    <#slot {@extra_items} />

    <li>
      <Bonfire.Classify.Web.TagModalLive object={@object} />
    </li>

    <li class="hover:bg-neutral hover:bg-opacity-20">
      <Bonfire.UI.Social.PinActionLive
        object={@object}
        class="flex items-center px-4 text-sm text-neutral-content/80"
      />
    </li>

    <li :if={Integration.is_admin?(@current_user) or Bonfire.Boundaries.can?(@current_user, :pin, :instance)}>
      <Bonfire.UI.Social.PinActionLive
        object={@object}
        class="flex items-center px-4 text-sm text-neutral-content/80"
        scope={:instance}
      />
    </li>

    <!-- Flag the action -->
    <li :if={ulid(@current_user) != subject_id(@activity, @object) and @verb != "Flag"}>
      <Bonfire.UI.Common.FlagActionLive
        object={@object}
        flagged={@flagged}
        label={l("Flag this") <> " " <> e(@object_type_readable, l("object"))}
        class="flex items-center text-sm text-neutral-content/80"
      />
    </li>

    <!-- Flag the author -->
    <li :if={ulid(@current_user) != subject_id(@activity, @object) and @verb != "Flag"}>
      <Bonfire.UI.Common.FlagActionLive
        object={@object}
        flagged={@flagged}
        label={l("Flag ") <> " " <> name(@activity, @object)}
        class="flex items-center py-2 text-sm text-neutral-content/80"
      />
    </li>

    <!-- Block the author & Block the author instance wide -->
    <Bonfire.Boundaries.Web.BlockMenuButtonsLive
      object={subject(@activity, @object)}
      peered={e(@object, :peered, nil)}
    />

    <!-- Delete the object -->
    <li>
      <Bonfire.UI.Social.Activity.DeleteObjectLive
        object={@object}
        creator_id={subject_id(@activity, @object)}
        object_type_readable={@object_type_readable}
      />
    </li>

    <!-- Delete the activity -->
    <li :if={@object_type not in [Bonfire.Data.Social.Message] and ulid(@activity)}>
      <Bonfire.UI.Social.Activity.DeleteObjectLive
        action="Bonfire.Social.Feeds:delete"
        object={@activity}
        creator_id={subject_id(@activity, @object)}
        object_type_readable={if @verb in ["Write", "Create"],
          do: l("activity from feeds"),
          else: l("%{activity_verb} from feeds", activity_verb: @verb)}
        creator_id={subject_id(@activity, @object)}
        explanation={l(
          "Deleting from feeds means this %{verb} and this %{object} still exist, but this activity won't be discoverable via the local instance's feeds. Remote feeds won't be affected.",
          object: e(@object_type_readable, l("object")),
          verb: @verb
        )}
      />
    </li>

    <#slot {@admin_items} />
  </ul>
</div>