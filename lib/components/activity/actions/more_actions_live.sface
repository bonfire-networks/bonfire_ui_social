<div
  :if={@current_user != nil and @showing_within not in [:notifications, :search]}
  aria-haspopup="true"
  data-tip={l("More")}
  class={
    "dropdown tooltip tooltip-bottom relative z-40 feed_activity relative ",
    "dropdown-end": @showing_within != :widget,
    "dropdown-top dropdown-end showing_within:widget": @showing_within == :widget
  }
>
  <button tabindex="0" class="btn btn-ghost btn-circle btn-sm">
    <span class="text-opacity-50 text-base-content">
      <Icon solid="DotsHorizontal" class="w-4 h-4" />
    </span>
  </button>
  <ul
    tabindex="0"
    class="w-60 z-[90] shadow menu dropdown-content bg-neutral-content rounded dropdown_actions
    role="
    menu"
    aria-orientation="vertical"
    aria-labelledby="more-menu"
  >
    <#slot {@extra_items} />

    <li class="hover:bg-neutral hover:bg-opacity-20">
      <Bonfire.UI.Common.OpenModalLive
        id={Pointers.ULID.generate()}
        title_text={l("Tag with topic(s)")}
        form_opts={%{"phx-submit" => "Bonfire.Social.Objects:tag"}}
        :let={autocomplete: autocomplete}
      >
        <input type="hidden" name="id" value={ulid(@object)}>
        <select data-phx-autocomplete="Bonfire.Classify:autocomplete" class="hidden tagify">
          {#for cat <- autocomplete || []}
            <option class="" value={ulid(cat)}>{e(cat, :profile, :name, nil)}</option>
          {/for}
        </select>
        <div class="flex-1" id={:tag_topics} phx-hook="InputOrSelectOne">
          <div phx-update="ignore">
            <input name="tags" class="w-full input input-bordered tagify">
          </div>
        </div>
        <:open_btn>
          <div class="flex items-center gap-0">
            <Icon solid="Collection" class="w-4 h-4 mr-2 shrink-0 text-neutral text-opacity-70" />
            <div class="text-sm text-neutral">
              {l("Tag with topic(s)")}
            </div>
          </div>
        </:open_btn>
        <:action_btns>
          <button class="normal-case btn-sm btn btn-primary">
            {l("Tag")}
          </button>
        </:action_btns>
      </Bonfire.UI.Common.OpenModalLive>
    </li>

    <!-- <li class="hover:bg-neutral hover:bg-opacity-20">
      <Bonfire.UI.Social.PinActionLive
        object={@object}
        class="flex items-center py-2 text-sm text-neutral"
      />
    </li> -->

    <li
      :if={Integration.is_admin?(@current_user) or Bonfire.Boundaries.can?(@current_user, :pin, :instance)}
      class="hover:bg-neutral hover:bg-opacity-20"
    >
      <Bonfire.UI.Social.PinActionLive
        object={@object}
        class="flex items-center py-2 text-sm text-neutral"
        scope={:instance}
      />
    </li>

    <!-- Flag the action -->
    <li
      :if={ulid(@current_user) != subject_id(@activity, @object) and @verb != "Flag"}
      class="hover:bg-neutral hover:bg-opacity-20"
    >
      <Bonfire.UI.Common.FlagActionLive
        object={@object}
        flagged={@flagged}
        label={l("Flag this") <> " " <> e(@object_type_readable, l("object"))}
        class="flex items-center py-2 text-sm text-neutral"
      />
    </li>

    <!-- Flag the author -->
    <li
      :if={ulid(@current_user) != subject_id(@activity, @object) and @verb != "Flag"}
      class="hover:bg-neutral hover:bg-opacity-20"
    >
      <Bonfire.UI.Common.FlagActionLive
        object={@object}
        flagged={@flagged}
        label={l("Flag ") <> " " <> name(@activity, @object)}
        class="flex items-center py-2 text-sm text-neutral"
      />
    </li>

    <!-- Block the author & Block the author instance wide -->
    <Bonfire.Boundaries.Web.BlockMenuButtonsLive
      object={subject(@activity, @object)}
      peered={e(@object, :peered, nil)}
    />

    <!-- Delete the object -->
    <li class="hover:bg-neutral hover:bg-opacity-20">
      <Bonfire.UI.Social.Activity.DeleteObjectLive
        object={@object}
        creator_id={subject_id(@activity, @object)}
        object_type_readable={@object_type_readable}
      />
    </li>

    <!-- Delete the activity -->
    <li
      :if={@object_type not in [Bonfire.Data.Social.Message] and ulid(@activity)}
      class="hover:bg-neutral hover:bg-opacity-20"
    >
      <Bonfire.UI.Social.Activity.DeleteObjectLive
        action="Bonfire.Social.Feeds:delete"
        object={@activity}
        creator_id={subject_id(@activity, @object)}
        object_type_readable={if @verb in ["Write", "Create"],
          do: l("activity from feeds"),
          else: l("%{activity_verb} from feeds", activity_verb: @verb)}
        creator_id={subject_id(@activity, @object)}
        explanation={l(
          "Deleting from feeds means this %{verb} and this %{object} still exist, but this activity won't be discoverable via the local instance's feeds. Remote feeds won't be affected.",
          object: e(@object_type_readable, l("object")),
          verb: @verb
        )}
      />
    </li>

    <#slot {@admin_items} />
  </ul>
</div>