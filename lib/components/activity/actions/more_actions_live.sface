<div
  data-id="more_menu"
  phx-hook="Tooltip"
  data-rendered={@showing_within}
  id={"more-menu-#{id(@activity_component_id || @activity)}"}
  aria-haspopup="true"
  class="feed_activity relative"
>
  {!-- phx-viewport-bottom={JS.add_class("!dropdown-top", to: "#more-menu-#{id(@activity_component_id || @activity)}")} --}

  <button tabindex="0" class="tooltip-button btn btn-ghost btn-circle btn-sm">
    <#Icon solid="DotsVertical" class="w-[18px] h-[18px] md:w-4 md:h-4 text-base-content/70" />
  </button>
  <ul
    tabindex="0"
    class="tooltip z-[999999999999] menu shadow bg-base-200 rounded-lg p-0 w-64 absolute top-0 right-0 hidden"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="more-menu"
  >
    <li :if={@object_type not in [Bonfire.Data.Social.Message]}><div class="w-full p-0 flex bg-base-content/5 rounded-b-none">
        {#if LiveHandler.feed_live_update_many_preloads?() == :async_actions}
          <StatelessComponent
            module={maybe_component(Bonfire.Boundaries.Web.BoundaryIconStatelessLive, @__context__)}
            object_id={id(@object)}
            object_boundary={@object_boundary}
            object_type={Types.object_type(@published_in) || @object_type}
            parent_id={@parent_id}
            with_icon
            with_label
            class="w-full"
            open_btn_wrapper_class="flex items-center w-full gap-2 text-sm text-base-content/70 py-4 px-4"
          />
        {#else}
          <!-- 
      TODO:
      <div
            phx-click="open"
            phx-target={"#modal_boundary_#{id(@activity || @object)}"}
            class="flex items-center w-full gap-2 text-sm text-base-content/70 px-4 py-2"
          >
            <#Icon iconify="fluent:door-tag-20-filled" class="w-4 h-4 shrink-0" />
            {l("View boundaries")} 
                        </div>
-->
        {/if}
      </div>
    </li>

    <#slot {@extra_items} />

    {#if current_user_id(@__context__)}
      <li :if={@viewing_main_object && @thread_id &&
        (@object_type in [Bonfire.Data.Social.Message] ||
           Bonfire.Boundaries.can?(@__context__, :describe, [@object_boundary, @thread_id]))}>
        <Bonfire.UI.Common.OpenModalLive
          id={"thread_title_#{id(@activity) || @thread_id}"}
          title_text={l("Edit the title of this discussion")}
          no_actions
          form_opts={%{"phx-submit" => "Bonfire.Social.Objects:set_name", "phx-target" => "##{@activity_component_id}"}}
        >
          <Field for={:thread} class="my-4">
            <TextInput
              placeholder="Set a name for the thread..."
              name="name"
              class="w-full bg-base-content/10 input input-bordered"
              value={@thread_title || e(@activity, :replied, :thread, :named, :name, nil) ||
                e(@object, :post_content, :name, nil) ||
                e(@object, :post_content, :summary, nil) || e(@object, :post_content, :html_body, nil) ||
                e(@object, :profile, :name, nil) || e(@object, :name, nil)}
            />
            <HiddenInput name="id" value={@thread_id} />
            <button class="normal-case w-full rounded-full btn-outline btn btn-primary mt-3">
              {l("Save")}
            </button>
          </Field>
          <:open_btn>
            <div class="flex items-center w-full gap-2 text-sm text-base-content/70">
              <#Icon iconify="subway:title" class="w-4 h-4 shrink-0" />
              {l("Edit discussion title")}
            </div>
          </:open_btn>
        </Bonfire.UI.Common.OpenModalLive>
      </li>

      {#case e(@object, :peered, :canonical_uri, nil) || @is_remote}
        {#match nil}
        {#match false}
        {#match canonical_uri}
          <li>
            <a
              phx-click="Bonfire.Social.Feeds:fetch_replies"
              class="!flex items-center gap-2 text-base-content/70"
            >
              <#Icon iconify="mdi:sprout" class="w-4 h-4 shrink-0 text-base-content/70" />
              <span>{l("Get latest comments")}</span>
            </a>
          </li>
          <li :if={is_binary(canonical_uri)}>
            <a
              href={canonical_uri}
              target="_blank"
              rel="noopener noreferrer"
              class="!flex items-center gap-2 text-base-content/70"
            >
              <#Icon solid="ExternalLink" class="w-4 h-4 shrink-0 text-base-content/70" />
              <span>{l("View on the original instance")}</span>
            </a>
          </li>
      {/case}

      <li :if={@object_type in [Bonfire.Data.Social.Post, Bonfire.Data.Social.Message]}>
        <StatelessComponent
          module={maybe_component(Bonfire.UI.Social.EditPostLive)}
          object={@object}
          object_boundary={@object_boundary}
          activity_component_id={@activity_component_id}
          parent_id={@activity_component_id || id(@activity)}
        />
      </li>

      {#if module_enabled?(Bonfire.Social.Pins, @__context__)}
        <li
          :if={current_user_id(@__context__) == @creator_id && @object_type not in [Bonfire.Data.Social.Message]}
          class="hover:bg-neutral hover:bg-opacity-20"
        >
          <StatelessComponent
            module={maybe_component(Bonfire.UI.Reactions.PinActionLive, @__context__)}
            object={@object}
            class="flex items-center px-4 text-sm text-neutral-content/80"
          />
        </li>
        <li :if={Bonfire.Boundaries.can?(@__context__, :pin, :instance)}>
          <StatelessComponent
            module={maybe_component(Bonfire.UI.Reactions.PinActionLive, @__context__)}
            object={@object}
            class="flex items-center px-4 text-sm text-neutral-content/80"
            scope={:instance}
          />
        </li>
      {/if}

      <li>
        <StatelessComponent
          module={maybe_component(Bonfire.Classify.Web.TagModalLive, @__context__)}
          object={@object}
          parent_id={@activity_component_id || id(@activity)}
        />
      </li>

      {#if @feed_name == :my}
        {#case e(@activity, :subject, :id, nil)}
          {#match nil}
          {#match subject_id}
            <li :if={subject_id != current_user_id(@__context__)}>
              <a
                phx-disable-with={l("Unfollowing...")}
                data-id="unfollow"
                :on-click="Bonfire.Social.Graph.Follows:unfollow"
                phx-value-id={subject_id}
                class="!flex items-center gap-2 text-base-content/70"
              >
                <#Icon solid="UserRemove" class="w-4 h-4 shrink-0" />
                <span class="truncate ellipsis">
                  {l("Unfollow")} {e(@activity, :subject, :profile, :name, nil) || e(@activity, :subject, :character, :username, nil)}</span>
              </a>
            </li>
        {/case}
      {/if}

      <li :if={current_user_id(@__context__) && current_user_id(@__context__) != @creator_id and
        Types.object_type(@creator) == Bonfire.Data.Identity.User}>
        <StatelessComponent
          module={maybe_component(Bonfire.Boundaries.Web.AddToCircleLive, @__context__)}
          user_id={@creator_id}
          name={e(@creator, :profile, :name, nil)}
          parent_id={id(@activity_component_id || @activity)}
        />
      </li>
    {/if}

    <li :if={current_user_id(@__context__) != @creator_id and @verb != "Flag" and
      module_enabled?(Bonfire.UI.Moderation.FlagActionLive, @__context__)}>
      <details>
        <summary class="text-base-content/70">
          <div class="flex items-center w-full gap-2 text-sm text-base-content/70">
            <#Icon solid="Flag" class="w-4 h-4 shrink-0" />
            <span class="truncate ellipsis">{l("Flag")}</span>
          </div>
        </summary>
        <ul>
          {!-- Flag the object --}
          <li data-role="flag_object">
            <StatelessComponent
              module={Bonfire.UI.Moderation.FlagActionLive}
              object={@object}
              flagged={@flagged}
              parent_id={"object-#{id(@activity_component_id || @activity)}"}
              object_type={e(@object_type_readable, l("object"))}
              label={l("Flag this %{object}", object: e(@object_type_readable, l("object")))}
            />
          </li>

          {!-- Flag the author --}
          <li
            data-role="flag_author"
            :if={not is_nil(@creator_id) and not is_nil(current_user_id(@__context__))}
          >
            <StatelessComponent
              module={Bonfire.UI.Moderation.FlagActionLive}
              object={@creator_id}
              flagged={@flagged}
              parent_id={"user-#{id(@activity_component_id || @activity)}"}
              object_type={@creator_name || l("user")}
            />
          </li>
        </ul>
      </details>
    </li>

    <StatelessComponent
      module={maybe_component(Bonfire.Label.Web.ContentLabelLive, @__context__)}
      object={@object}
      object_boundary={@object_boundary}
    />

    {!-- Block the author, etc --}
    <StatelessComponent
      :if={current_user_id(@__context__) != @creator_id}
      module={maybe_component(Bonfire.Boundaries.Web.BlockMenuButtonsLive, @__context__)}
      parent_id={@activity_component_id || id(@activity)}
      object={@creator}
      peered={e(@object, :peered, nil)}
    />

    {#if @object_boundary && @object_type not in [Bonfire.Data.Social.Message] &&
        (id(@object) || id(@activity)) &&
        Bonfire.UI.Social.Activity.DeleteObjectLive.can_delete?(@__context__, @object, @object_boundary)}
      <li>
        <details>
          <summary class="text-error/80">
            <div class="flex items-center w-full gap-2 text-sm text-error/80">
              <#Icon solid="Trash" class="w-4 h-4 shrink-0" />
              <span class="truncate ellipsis">{l("Delete")}</span>
            </div>
          </summary>
          <ul>
            <li :if={id(@object)}>
              <StatelessComponent
                module={maybe_component(Bonfire.UI.Social.Activity.DeleteObjectLive, @__context__)}
                skip_permission_check
                object={@object}
                creator_id={@creator_id}
                object_type_readable={@object_type_readable}
                object_boundary={@object_boundary}
                parent_id={"object-#{id(@activity_component_id || @activity)}"}
              />
            </li>

            {!-- Delete the activity --}
            <li :if={id(@activity)}>
              <StatelessComponent
                module={maybe_component(Bonfire.UI.Social.Activity.DeleteObjectLive, @__context__)}
                skip_permission_check
                action="Bonfire.Social.Feeds:delete"
                object={@activity}
                object_boundary={@object_boundary}
                object_type_readable={l("from feeds")}
                creator_id={@creator_id}
                parent_id={"delete-activity-#{id(@activity_component_id || @activity)}"}
                explanation={l(
                  "Deleting from feeds means this %{verb} and this %{object} still exist, but this activity won't be discoverable via the local instance's feeds. Remote feeds won't be affected.",
                  object: e(@object_type_readable, l("object")),
                  verb: @verb
                )}
              />
            </li>
          </ul>
        </details>
      </li>
      {!-- Delete the object --}
    {#elseif @object_boundary && @object_type in [Bonfire.Data.Social.Message] && id(@activity)}
      <li>
        <StatelessComponent
          module={maybe_component(Bonfire.UI.Social.Activity.DeleteObjectLive, @__context__)}
          object={@object}
          creator_id={@creator_id}
          object_type_readable={@object_type_readable}
          object_boundary={@object_boundary}
          parent_id={"object-#{id(@activity_component_id || @activity)}"}
        />
      </li>
    {/if}
    <#slot {@admin_items} />
  </ul>
</div>