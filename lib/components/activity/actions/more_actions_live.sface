<div
  data-id="more_menu"
  phx-hook="Tooltip"
  data-position="left-end"
  data-rendered={@showing_within}
  id={"more-menu-#{id(@activity_component_id || @activity)}"}
  aria-haspopup="true"
  class="feed_activity relative"
>
  {!-- phx-viewport-bottom={JS.add_class("!dropdown-top", to: "#more-menu-#{id(@activity_component_id || @activity)}")} --}

  <button tabindex="0" class="tooltip-button btn btn-ghost btn-circle btn-sm">
    <#Icon solid="DotsVertical" class="w-[18px] h-[18px] md:w-4 md:h-4 text-base-content/50" />
  </button>
  <ul
    tabindex="0"
    class="tooltip z-[999999999999] menu shadow bg-base-100 shadow border border-base-content/10 rounded-lg p-1 w-64 absolute top-0 left-0 hidden"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="more-menu"
  >
    <li :if={@object_type not in [Bonfire.Data.Social.Message]}><div class="w-full p-0 flex bg-base-content/5">
        {#if LiveHandler.feed_live_update_many_preloads?() == :async_actions}
          <StatelessComponent
            module={maybe_component(Bonfire.UI.Boundaries.Web.BoundaryIconStatelessLive, @__context__)}
            object_id={id(@object)}
            object_boundary={@object_boundary}
            object_type={Types.object_type(@published_in) || @object_type}
            parent_id={@parent_id}
            with_icon
            with_label
            class="w-full"
            open_btn_wrapper_class="flex items-center w-full gap-2 text-sm py-3 px-4"
          />
        {#else}
          <!-- 
      TODO:
      <div
            phx-click="open"
            phx-target={"#modal_boundary_#{id(@activity || @object)}"}
            class="flex items-center w-full gap-2 text-sm  px-4 py-2"
          >
            <#Icon iconify="fluent:door-tag-20-filled" class="w-4 h-4 shrink-0" />
            {l("View boundaries")} 
                        </div>
-->
        {/if}
      </div>
    </li>

    <li>
      <a
        phx-hook="Copy"
        id={"more_action_copy_url_#{id(@activity)}_#{id(@object)}_#{@showing_within}"}
        href={URIs.canonical_url(@object)}
        class="flex items-center gap-2 text-sm text-base-content"
      >
        <#Icon iconify="ri:file-copy-line" class="w-4 h-4 shrink-0" />
        <span data-role="label">{l("Copy link")}</span>
      </a>
    </li>

    <#slot {@extra_items} />

    {#if current_user_id(@__context__)}
      <li :if={@viewing_main_object && @thread_id &&
        (@object_type in [Bonfire.Data.Social.Message] ||
           Bonfire.Boundaries.can?(@__context__, :describe, [@object_boundary, @thread_id]))}>
        <Bonfire.UI.Common.OpenModalLive
          id={"thread_title_#{id(@activity) || @thread_id}"}
          title_text={l("Edit the title of this discussion")}
          no_actions
          form_opts={%{"phx-submit" => "Bonfire.Social.Objects:set_name", "phx-target" => "##{@activity_component_id}"}}
        >
          <Field for={:thread} class="my-4">
            <TextInput
              placeholder="Set a name for the thread..."
              name="name"
              class="w-full bg-base-content/10 input input-bordered"
              value={@thread_title || e(@activity, :replied, :thread, :named, :name, nil) ||
                e(@object, :post_content, :name, nil) ||
                e(@object, :post_content, :summary, nil) || e(@object, :post_content, :html_body, nil) ||
                e(@object, :profile, :name, nil) || e(@object, :name, nil)}
            />
            <HiddenInput name="thread_id" value={@thread_id} />
            <button class="normal-case w-full  btn-outline btn btn-primary mt-3">
              {l("Save")}
            </button>
          </Field>
          <:open_btn>
            <div class="flex items-center w-full gap-2 text-sm text-base-content">
              <#Icon iconify="subway:title" class="w-4 h-4 shrink-0" />
              {l("Edit discussion title")}
            </div>
          </:open_btn>
        </Bonfire.UI.Common.OpenModalLive>
      </li>

      {#case e(@object, :peered, :canonical_uri, nil) || @is_remote}
        {#match nil}
        {#match false}
        {#match canonical_uri}
          <li :if={@showing_within == :thread}>
            <a
              phx-click="Bonfire.Social.Feeds:fetch_replies"
              phx-target={"##{@activity_component_id}"}
              phx-value-id={id(@object) || id(@activity)}
              class="!flex items-center gap-2"
            >
              <#Icon iconify="mdi:sprout" class="w-4 h-4 shrink-0 text-base-content" />
              <span>{l("Get latest replies")}</span>
            </a>
          </li>
          <li :if={@showing_within == :thread}>
            <a
              phx-click="Bonfire.Social.Feeds:fetch_thread"
              phx-target={"##{@activity_component_id}"}
              phx-value-id={id(@object) || id(@activity)}
              class="!flex items-center gap-2"
            >
              <#Icon iconify="clarity:tree-view-solid" class="w-4 h-4 shrink-0 text-base-content" />
              <span>{l("Get latest activities")}</span>
            </a>
          </li>
          <li :if={is_binary(canonical_uri)}>
            <a
              href={canonical_uri}
              target="_blank"
              rel="noopener noreferrer"
              class="!flex items-center gap-2"
            >
              <#Icon solid="ExternalLink" class="w-4 h-4 shrink-0 text-base-content" />
              <span>{l("View remotely")}</span>
            </a>
          </li>
      {/case}

      <li
        :if={module_enabled?(Bonfire.Social.Answers, @__context__) and @showing_within == :thread and
          @thread_id != id(@object)}
        class="hover:bg-neutral hover:bg-opacity-20"
      >
        <!-- TODO: should depend on thread creator: current_user_id(@__context__) == @thread_creator_id -->
        <StatelessComponent
          module={maybe_component(Bonfire.UI.Reactions.PinActionLive, @__context__)}
          scope={:thread_answer}
          scope_object={@thread_id}
          object={@object}
          pinned?={not is_nil(e(@activity, :replied, :pinned, nil) || e(@activity, :pinned, nil))}
          class="flex items-center px-4 text-sm text-neutral-content/80"
        />
      </li>

      {#if module_enabled?(Bonfire.Social.Pins, @__context__) and
          @object_type not in [Bonfire.Data.Social.Message]}
        <li
          :if={@showing_within == :thread and @thread_id != id(@object)}
          class="hover:bg-neutral hover:bg-opacity-20"
        >
          <!-- TODO: should depend on thread creator: current_user_id(@__context__) == @thread_creator_id -->
          <StatelessComponent
            module={maybe_component(Bonfire.UI.Reactions.PinActionLive, @__context__)}
            scope={:thread}
            scope_object={@thread_id}
            object={@object}
            pinned?={not is_nil(e(@activity, :replied, :pinned, nil) || e(@activity, :pinned, nil))}
            class="flex items-center px-4 text-sm text-neutral-content/80"
          />
        </li>

        {!-- 
        # TODO: re-enable once pins are shown on profile
        <li
          :if={current_user_id(@__context__) == @creator_id}
          class="hover:bg-neutral hover:bg-opacity-20"
        >
          <StatelessComponent
            module={maybe_component(Bonfire.UI.Reactions.PinActionLive, @__context__)}
            scope={:profile}
            object={@object}
            pinned?={not is_nil(e(@activity, :pinned, nil))}
            class="flex items-center px-4 text-sm text-neutral-content/80"
          />
        </li> --}
        <li :if={Bonfire.Boundaries.can?(@__context__, :pin, :instance)}>
          <StatelessComponent
            module={maybe_component(Bonfire.UI.Reactions.PinActionLive, @__context__)}
            scope={:instance}
            object={@object}
            class="flex items-center px-4 text-sm text-neutral-content/80"
          />
        </li>
      {/if}

      <li :if={extension_enabled?(:bonfire_ui_topics) or extension_enabled?(:bonfire_ui_groups)}>
        <StatelessComponent
          module={maybe_component(Bonfire.Tag.Web.TagModalLive, @__context__)}
          object={@object}
          parent_id={@activity_component_id || id(@activity)}
        />
      </li>

      {#if @feed_name == :my}
        {#case e(@activity, :subject, :id, nil)}
          {#match nil}
          {#match subject_id}
            <li :if={subject_id != current_user_id(@__context__)}>
              <a
                phx-disable-with={l("Unfollowing...")}
                data-id="unfollow"
                :on-click="Bonfire.Social.Graph.Follows:unfollow"
                phx-value-id={subject_id}
                class="!flex items-center gap-2"
              >
                <#Icon solid="UserRemove" class="w-4 h-4 shrink-0" />
                <span class="truncate ellipsis">
                  {l("Unfollow")} {e(@activity, :subject, :profile, :name, nil) || e(@activity, :subject, :character, :username, nil)}</span>
              </a>
            </li>
        {/case}
      {/if}

      <li :if={(current_user_id(@__context__) && current_user_id(@__context__) != @creator_id) and
        Types.object_type(@creator) == Bonfire.Data.Identity.User}>
        <StatelessComponent
          module={maybe_component(Bonfire.UI.Boundaries.Web.AddToCircleLive, @__context__)}
          user_id={@creator_id}
          name={e(@creator, :profile, :name, nil)}
          parent_id={id(@activity_component_id || @activity)}
        />
      </li>
    {/if}

    {#if @object_type in [Bonfire.Data.Social.Post, Bonfire.Data.Social.Message] or
        not is_nil(e(@object, :post_content, nil))}
      {#if current_user_id(@__context__)}
        <StatelessComponent
          module={maybe_component(Bonfire.UI.Social.EditPostLive)}
          object={@object}
          object_boundary={@object_boundary}
          activity_component_id={@activity_component_id}
          parent_id={@activity_component_id || id(@activity)}
        />
      {#else}
        <li :if={Bonfire.Social.PostContents.versioning_enabled?(@__context__)}>
          <a
            href={"/post/#{id(@object)}/history/"}
            class="flex items-center w-full gap-2 text-sm text-base-content"
          >
            <#Icon
              iconify="material-symbols:difference-outline-rounded"
              class="w-4 h-4 shrink-0 text-base-content"
            />
            <div class="text-sm text-base-content">
              {l("Version history")}
            </div>
          </a>
        </li>
      {/if}
    {/if}

    <li :if={current_user_id(@__context__) != @creator_id and @verb != "Flag" and
      module_enabled?(Bonfire.UI.Moderation.FlagActionLive, @__context__)}>
      {#if !current_user_id(@__context__)}
        <li>
          <a
            href={"/remote_interaction?type=flag&name=#{l("this %{object}", object: e(@object_type_readable, l("object")))}&url=#{@permalink || URIs.canonical_url(@object)}"}
            class="flex items-center w-full gap-2 text-sm text-base-content"
          >
            <#Icon solid="Flag" class="w-4 h-4 shrink-0" />
            <span class="truncate ellipsis">{l("Flag this %{object}", object: e(@object_type_readable, l("object")))}</span>
          </a>
        </li>
      {#else}
        <details>
          <summary class="">
            <div class="flex items-center w-full gap-2 text-sm text-base-content">
              <#Icon solid="Flag" class="w-4 h-4 shrink-0" />
              <span class="truncate ellipsis">{l("Flag")}</span>
            </div>
          </summary>
          <ul>
            {!-- Flag the object --}
            <li data-role="flag_object">
              <StatelessComponent
                module={maybe_component(Bonfire.UI.Moderation.FlagActionLive)}
                object={@object}
                permalink={@permalink}
                flagged={@flagged}
                parent_id={"object-#{id(@activity_component_id || @activity)}"}
                object_type={e(@object_type_readable, l("object"))}
                label={l("Flag this %{object}", object: e(@object_type_readable, l("object")))}
              />
            </li>

            {!-- Flag the author --}
            <li data-role="flag_author" :if={not is_nil(@creator_id)}>
              <StatelessComponent
                module={maybe_component(Bonfire.UI.Moderation.FlagActionLive)}
                object={@creator_id}
                flagged={@flagged}
                parent_id={"user-#{id(@activity_component_id || @activity)}"}
                object_type={@creator_name || l("user")}
              />
            </li>
          </ul>
        </details>
      {/if}
    </li>

    <StatelessComponent
      module={maybe_component(Bonfire.Label.Web.ContentLabelLive, @__context__)}
      object={@object}
      object_boundary={@object_boundary}
      target={"##{@activity_component_id}"}
      btn_label={l("Label this %{object}", object: e(@object_type_readable, l("object")))}
    />

    {!-- Block the author, etc --}
    <StatelessComponent
      :if={@creator_id && current_user_id(@__context__) != @creator_id}
      module={maybe_component(Bonfire.UI.Boundaries.Web.BlockMenuButtonsLive, @__context__)}
      parent_id={@activity_component_id || id(@activity)}
      object={@creator || @creator_id}
      permalink={@permalink}
      silence_extra_object={id(@object)}
      extra_object_label={l("this %{object}", object: e(@object_type_readable, l("object")))}
      peered={e(@object, :peered, nil)}
    />

    {#if @viewing_main_object && @thread_id && @object_type not in [Bonfire.Data.Social.Message]}
      {#if Bonfire.Boundaries.can?(@__context__, :grant, [@object_boundary, @thread_id])}
        <li>
          <Bonfire.UI.Common.OpenModalLive
            id={"thread_lock_#{id(@activity) || @thread_id}"}
            title_text={l("Lock this discussion")}
            no_actions
          >
            <p>{l(
                "You can lock this discussion to prevent any replies from users on this instance and to block any remote replies from federating back to this instance."
              )}</p>
            <button
              phx-click="Bonfire.Boundaries.Blocks:lock"
              phx-value-id={@thread_id}
              class="normal-case w-full  btn-outline btn btn-primary mt-3"
            >
              {l("Lock this discussion")}
            </button>
            <:open_btn>
              <div class="flex items-center w-full gap-2 text-sm text-base-content">
                <#Icon iconify="ic:round-lock" class="w-4 h-4 shrink-0" />
                {l("Lock this discussion")}
              </div>
            </:open_btn>
          </Bonfire.UI.Common.OpenModalLive>
        </li>
      {#elseif @creator_id == current_user_id(@__context__) or
          Bonfire.Boundaries.can?(@__context__, :grant, :instance)}
        <li>
          <Bonfire.UI.Common.OpenModalLive
            id={"thread_unlock_#{id(@activity) || @thread_id}"}
            title_text={l("Unlock this discussion")}
            no_actions
          >
            <p>{l("You can unlock this discussion to accept replies again.")}</p>
            <button
              phx-click="Bonfire.Boundaries.Blocks:unlock"
              phx-value-id={@thread_id}
              class="normal-case w-full  btn-outline btn btn-primary mt-3"
            >
              {l("Unlock this discussion")}
            </button>
            <:open_btn>
              <div class="flex items-center w-full gap-2 text-sm text-base-content">
                <#Icon iconify="ic:round-lock" class="w-4 h-4 shrink-0" />
                {l("Unlock this discussion")}
              </div>
            </:open_btn>
          </Bonfire.UI.Common.OpenModalLive>
        </li>
      {/if}
    {/if}

    {#if @object_boundary && @object_type not in [Bonfire.Data.Social.Message] &&
        (id(@object) || id(@activity)) &&
        Bonfire.UI.Social.Activity.DeleteObjectLive.can_delete?(@__context__, @object, @object_boundary)}
      <li>
        <details>
          <summary class="text-error/80">
            <div class="flex items-center w-full gap-2 text-sm text-error/80">
              <#Icon solid="Trash" class="w-4 h-4 shrink-0" />
              <span class="truncate ellipsis">{l("Delete")}</span>
            </div>
          </summary>
          <ul>
            <li :if={id(@object)}>
              <StatelessComponent
                module={maybe_component(Bonfire.UI.Social.Activity.DeleteObjectLive, @__context__)}
                skip_permission_check
                object={@object}
                creator_id={@creator_id}
                object_type_readable={@object_type_readable}
                object_boundary={@object_boundary}
                parent_id={"object-#{id(@activity_component_id || @activity)}"}
              />
            </li>

            {!-- Delete the activity --}
            <li :if={id(@activity)}>
              <StatelessComponent
                module={maybe_component(Bonfire.UI.Social.Activity.DeleteObjectLive, @__context__)}
                skip_permission_check
                action="Bonfire.Social.Feeds:delete"
                object={@activity}
                object_boundary={@object_boundary}
                object_type_readable={l("from feeds")}
                creator_id={@creator_id}
                parent_id={"delete-activity-#{id(@activity_component_id || @activity)}"}
                explanation={l(
                  "Deleting from feeds means this %{verb} and this %{object} still exist, but this activity won't be discoverable via the local instance's feeds. Remote feeds won't be affected.",
                  object: @object_type_readable || l("object"),
                  verb: @verb
                )}
              />
            </li>
          </ul>
        </details>
      </li>
      {!-- Delete the object --}
    {#elseif @object_boundary && @object_type in [Bonfire.Data.Social.Message] && id(@activity)}
      <li>
        <StatelessComponent
          module={maybe_component(Bonfire.UI.Social.Activity.DeleteObjectLive, @__context__)}
          object={@object}
          creator_id={@creator_id}
          object_type_readable={@object_type_readable}
          object_boundary={@object_boundary}
          parent_id={"object-#{id(@activity_component_id || @activity)}"}
        />
      </li>
    {/if}
    <#slot {@admin_items} />
  </ul>
</div>