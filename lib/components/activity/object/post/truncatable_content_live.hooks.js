/*
This file was generated by the Surface compiler.
*/

export default {
  mounted() {
    this.checkTruncation()
    this.setupClickHandlers()
  },

  updated() {
    this.checkTruncation()
  },

  checkTruncation() {
    // Skip truncation in specific contexts where it's not needed
    const showingWithin = this.el.dataset.showingWithin
    const viewingMainObject = this.el.dataset.viewingMainObject === 'true'

    if (viewingMainObject || ['smart_input'].includes(showingWithin)) {
      this.hideControls()
      return
    }

    // Find the content element using the data attribute
    const contentEl = this.el.querySelector('[data-id="object_body"]')
    if (!contentEl) return

    // Determine if controls are needed
    const hasTruncateClass = contentEl.classList.contains('previewable_truncate')
    const isExpanded = contentEl.classList.contains('previewable_expanded')
    const isOverflowing = contentEl.scrollHeight > contentEl.clientHeight

    // Show controls if content is truncated and overflowing OR already expanded
    const needsControls = (hasTruncateClass && isOverflowing) || isExpanded

    // Update controls visibility
    const controls = this.el.querySelector('.read-more-controls')
    if (controls) {
      controls.style.display = needsControls ? 'block' : 'none'
    }
  },

  hideControls() {
    const controls = this.el.querySelector('.read-more-controls')
    if (controls) {
      controls.style.display = 'none'
    }
  },

  setupClickHandlers() {
    const readMoreBtn = this.el.querySelector('.read-more-btn')
    const readLessBtn = this.el.querySelector('.read-less-btn')

    if (readMoreBtn) {
      readMoreBtn.addEventListener('click', () => this.toggleContent(true))
    }

    if (readLessBtn) {
      readLessBtn.addEventListener('click', () => this.toggleContent(false))
    }
  },

  toggleContent(expand) {
    const contentEl = this.el.querySelector('[data-id="object_body"]')
    const readMoreBtn = this.el.querySelector('.read-more-btn')
    const readLessBtn = this.el.querySelector('.read-less-btn')

    if (contentEl) {
      contentEl.classList.toggle('previewable_truncate', !expand)
      contentEl.classList.toggle('previewable_expanded', expand)
    }

    if (readMoreBtn) {
      readMoreBtn.style.display = expand ? 'none' : 'block'
    }

    if (readLessBtn) {
      readLessBtn.style.display = expand ? 'block' : 'none'
    }
  }
}