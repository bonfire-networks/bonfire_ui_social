<div
  id={"comment-"<> e(@comment, :id, "")}
  data-id="comment"
  x-data="{show_replies: true}"
  class={
    "reply thread-level-" <> to_string(@thread_level) <> " flex relative w-full mx-auto",
    "border-b border-base-content/10": @thread_level == 1

  }
  >
  <div class="flex-1 w-full ">
    <div class="relative flex flex-1 w-full items-top">
      <div 
        :if={e(assigns, :thread_mode, nil) !=:flat && length(@child_replies)>0 }
        x-cloak
        x-show="show_replies"
        class="group z-10 left-[16px] px-3 top-[40px] bottom-[0px] absolute">
        <i 
          :class=" !show_replies ? 'bg-primary bottom-[0px]' : 'bg-base-content/20 bottom-[0px]'"
          class="bg-base-content/20 top-0 bottom-0 z-10 w-[2px] absolute"></i>
      </div>
      <div 
        x-cloak
        class="p-3 pr-0 pl-[21px]"
        @click="show_replies = !show_replies"
        x-show="!show_replies">
        <Outline.ChevronDownIcon class="w-4 h-4 cursor-pointer text-primary text-opacity-70 hover:text-opacity hover:text-opacity-100" />
      </div>
      <div 
        class="flex-1 w-full"
        x-cloak 
        x-data="{reply: false, show: true}"
        >
          {#case @comment}
            {#match %{__struct__: Bonfire.Data.Social.Activity, object: object} = activity}
              <Bonfire.UI.Social.ActivityLive
                id={e(@comment, :id, "ca")<>":"<>e(activity, :id, "")}
                activity={Map.drop(activity, [:object])}
                object={object}
                thread_object={@thread_object}
                feed_id={@feed_id}
                showing_within={:thread}
                thread_mode={e(assigns, :thread_mode, nil)}
                object_boundary={if e(assigns, :showing_within, nil)==:messages, do: :skip}
                class="showing_within:thread !py-2"
              />

            {#match %{activity: %{object: object} = activity}}
              <Bonfire.UI.Social.ActivityLive
                id={e(@comment, :id, "ca")<>":"<>e(activity, :id, "")}
                activity={Map.drop(activity, [:object])}
                object={object}
                thread_object={@thread_object}
                feed_id={@feed_id}
                showing_within={:thread}
                url={@url}
                thread_mode={e(assigns, :thread_mode, nil)}
                object_boundary={if e(assigns, :showing_within, nil)==:messages, do: :skip}
                class="showing_within:thread !py-2"
              />
            {#match _}

            <div class="mx-4 my-2">
              <div class="p-4 rounded-md bg-info/10">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <Solid.InformationCircleIcon class="w-5 h-5 text-info" />
                  </div>
                  <div class="flex-1 ml-3 md:flex md:justify-between">
                    <p class="text-sm text-info">{l "This comment was deleted."}</p>
                  </div>
                </div>
              </div>
            </div>


            <!-- <div class="mx-3 my-2">
              <div class="shadow-lg alert alert-warning">
                <div>
                  <svg xmlns="http://www.w3.org/2000/svg" class="flex-shrink-0 w-6 h-6 stroke-current" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" /></svg>
                  <span>{l "A comment was deleted."}</span>
                </div>
              </div>
            </div> -->
              <!-- <div class="p-3">
                {l "A comment was deleted."}
              </div> -->
          {/case}
      </div>
    </div>
    <div 
      :if={e(assigns, :thread_mode, nil) !=:flat}
      x-show="show_replies" >
      <div class={"replies replies-level-" <> to_string(@thread_level+1) <> " ml-8"}>

        {#if is_list(@child_replies) and length(@child_replies)>0 }
          {#for {{subreply, sub_child_replies}, index} <- Enum.with_index(@child_replies, 1) }
            <div class="relative">
              <div class="absolute border-base-content/20 w-5 h-6 border-0 border-b-2 border-l-2 rounded-bl-lg left-[-4px] top-0"></div>
              <div
                :if={index < length(@child_replies)}
                class="absolute border-base-content/20 top-0 bottom-0 border-0  border-l-2 left-[-4px] "></div>
              <CommentLive
                reply_to_id={e(@comment, :id, nil)}
                thread_id={@thread_id} 
                comment={subreply}
                thread_object={@thread_object}
                feed_id={@feed_id}
                child_replies={sub_child_replies}
                thread_level={@thread_level+1}
                thread_mode={e(assigns, :thread_mode, nil)}
                showing_within={e(assigns, :showing_within, nil)}
                url={@url}
              />
            </div>
          {/for}

        <!-- {#else} -->

          <!-- {#case sub_replies_count(@comment)}

            {#match sub_replies_count when is_integer(sub_replies_count) and sub_replies_count > 0}
              <div class="flex items-center -mx-2 -mt-1">
                <div 
                  @click="show = true" 
                  x-show="show" 
                  phx-click="Bonfire.Social.Posts:load_replies" 
                  phx-value-id={e(@comment, :id, nil)} 
                  phx-value-level={@thread_level} 
                  class="flex items-center visible px-2 py-1 ml-4 rounded cursor-pointer group dark:bg-neutral-400 hover:bg-neutral hover:bg-opacity-30 click:invisible">
                  <span class="text-xs font-semibold text-primary-content-800">Load {@sub_replies_count} more replies</span>
                </div>
              </div>
            {#match _}
          {/case} -->

        {/if}
      </div>
    </div>
  </div>
</div>
