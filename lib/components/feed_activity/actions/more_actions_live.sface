<div
  :if={current_user(assigns) != nil and e(assigns, :showing_within, nil) not in [:notifications, :search]}
  aria-haspopup="true"
  class={"dropdown  feed_activity relative z-40",
  "dropdown-end": e(assigns, :showing_within, nil) != :widget,
  "dropdown-top dropdown-end showing_within:widget": e(assigns, :showing_within, nil) == :widget
  }>
  <div 
    phx-click="Bonfire.Social.Feeds:open_activity"
    phx-value-ignore={true}
    type="button"
    role="button"
    tabindex="0"
    class={"btn btn-ghost btn-circle btn-sm"}> 
    <span class="text-base-content text-opacity-70">
      <Solid.DotsHorizontalIcon class="w-4 h-4" />
    </span>
  </div>
  <ul
    tabindex="0"
    class="w-60 z-40 shadow menu dropdown-content bg-neutral-content rounded dropdown_actions
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="more-menu">

    <#slot name="extra_items" />

    <!-- Copy the activity -->
    <!-- <li 
      class=" hover:bg-neutral hover:bg-opacity-20">
      <div class="">
        <div class="flex items-center w-full text-sm text-neutral no-padding">
          <Solid.ClipboardIcon
          class={"w-4 h-4 mr-2 shrink-0 text-neutral text-opacity-70"} />
          <span 
            class={"truncate ellipsis"}>
            {l "Copy the post"}
          </span>
        </div>
      </div>
    </li> -->

    <!-- Follow the author-->
    <!-- <li 
      :if={e(current_user(assigns), :id, nil) != subject_id(assigns)}
      class=" hover:bg-neutral hover:bg-opacity-20">
      <div>
        <Bonfire.UI.Common.FollowButtonLive
          object={subject(assigns)}
          label={name(assigns)}
          id={ComponentID.new(Bonfire.UI.Common.FollowButtonLive, subject(assigns))}
          class="flex items-center w-full text-sm text-neutral no-padding"
          icon_class="w-4 h-4 mr-0 shrink-0 text-neutral text-opacity-70"
        />
      </div>
    </li> -->

    
    <!-- Flag the action -->
    <li 
      :if={e(current_user(assigns), :id, nil) != subject_id(assigns) and @verb !="flag"}
      class=" hover:bg-neutral hover:bg-opacity-20">
      <Bonfire.UI.Common.FlagActionLive 
        object={@object}
        flagged={@flagged}
        label={l("Flag this")<>" "<>e(assigns, :object_type_readable, l "object")}
        class="flex items-center py-2 text-sm text-neutral"
      />
    </li>

    <!-- Flag the author -->
    <li 
      :if={e(current_user(assigns), :id, nil) != subject_id(assigns) and @verb !="flag"}
      class=" hover:bg-neutral hover:bg-opacity-20">
      <Bonfire.UI.Common.FlagActionLive 
        object={@object}
        flagged={@flagged}
        label={l("Flag ")<>" "<>name(assigns)}
        class="flex items-center py-2 text-sm text-neutral"
      />
    </li>

    <!-- Block the author & Block the author instance wide-->
    <Bonfire.Boundaries.Web.BlockMenuButtonsLive
      object={subject(assigns)}
      peered={e(@object, :peered, nil)}
    />

    <!-- Delete the activity -->

    <li 
      :if={@object_type not in [Bonfire.Data.Social.Message] and e(current_user(assigns), :id, nil) == subject_id(assigns) or Bonfire.Me.Users.is_admin?(current_user(assigns))}
      class=" hover:bg-neutral hover:bg-opacity-20">
      <OpenModalLive
        id={ComponentID.new(OpenModalLive, @object)} 
        title_text={l("Delete this")<>" "<>(if @verb in ["write", "create"], do: l("from feeds"), else: @verb)}
        >
        {l "Deleting from feeds means the %{object} can still be accessed by anyone who has a direct link, but won't be discoverable via this instance's feeds.", object: e(assigns, :object_type_readable, l "object")}
        {l "Remote feeds won't be affected."} 
        <:open_btn>
          <button class="flex items-center text-sm text-neutral" type="button">
            <Solid.TrashIcon class="w-4 h-4 mr-2 shrink-0 text-neutral text-opacity-70" />
            <span class="truncate ellipsis">
              {l("Delete this")<>" "<>(if @verb in ["write", "create"], do: l("from feeds"), else: @verb)}
            </span>
          </button>
        </:open_btn>
        <:action_btns>
          <button 
          phx-click={"Bonfire.Social.Feeds:delete"} 
          phx-value-id={e(@activity, :id, "")}
          class="btn btn-error">
          <Solid.TrashIcon class="w-4 h-4 mr-2 shrink-0 text-neutral text-opacity-70" />
          <span class="truncate ellipsis">{l("Delete this")<>" "<>(if @verb in ["write", "create"], do: l("from feeds"), else: @verb)}</span> 
        </button>
        </:action_btns>
      </OpenModalLive>
    </li>


    <!-- Delete the object -->
    <li 
      :if={e(current_user(assigns), :id, nil) == subject_id(assigns) or Bonfire.Me.Users.is_admin?(current_user(assigns))}
      class=" hover:bg-neutral hover:bg-opacity-20">
      <OpenModalLive
        id={ComponentID.new(OpenModalLive, @object)} 
        title_text={l("Delete this")<>" "<>e(assigns, :object_type_readable, l "object")}
        >
        {rich l "You may be able to undo this deletion *in some cases*, but in any case the data will eventually be permanently deleted from this instance."} 
        {l "Remote instances will be asked to delete it as well."} 
        <:open_btn>
          <button class="flex items-center text-sm text-neutral" type="button">
            <Solid.TrashIcon class="w-4 h-4 mr-2 shrink-0 text-neutral text-opacity-70" />
            <span class="truncate ellipsis">
              {l("Delete this")<>" "<>e(assigns, :object_type_readable, l "object")}
            </span>
          </button>
        </:open_btn>
        <:action_btns>
          <button 
          phx-click={"Bonfire.Social.Objects:delete"} 
          phx-value-id={e(@object, :id, "")}
          class="btn btn-error">
          <Solid.TrashIcon class="w-4 h-4 mr-2 shrink-0" />
          <span class="truncate ellipsis">{l("Delete this")<>" "<>e(assigns, :object_type_readable, l "object")}</span>
        </button>
        </:action_btns>

      </OpenModalLive>
    </li>

    <#slot name="admin_items" />

  </ul>
</div>