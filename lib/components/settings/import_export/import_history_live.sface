<div class="max-w-4xl mx-auto w-full p-4">
  <div :if={@stats != %{}} class="mb-6">
    <!-- Overview Stats Grid with clickable filters -->
    <div class="flex flex-col gap-2">
      <div class="stats bg-base-200 border-base-content/10 border w-full">
        <!-- Total Progress -->
        <div class="stat">
          <div class="stat-figure text-primary">
            <#Icon iconify="ph:chart-line-duotone" class="w-6 h-6" />
          </div>
          <div class="stat-title text-xs">{l("Total Progress")}</div>
          <div class="stat-value text-lg">{(@stats.total || 0) - (@stats.active || 0)}/{@stats.total || 0}</div>
          <div class="stat-desc">
            <div class="w-full bg-base-300 rounded-full h-2 mt-1">
              <div
                class="bg-success h-2 rounded-full transition-all duration-300"
                style={"width: #{if(@stats.total && @stats.total > 0, do: round((@stats.total - (@stats.active || 0)) / @stats.total * 100), else: 0)}%"}
              />
            </div>
            <button
              class="text-xs mt-1 inline-block hover:underline cursor-pointer"
              phx-click="filter"
              phx-value-status="done"
            >
              {if(@stats.total && @stats.total > 0,
                do: round((@stats.total - (@stats.active || 0)) / @stats.total * 100),
                else: 0
              )}% {l("complete")}
            </button>
          </div>
        </div>

        <!-- Active Jobs (clickable) -->
        <div
          class="stat cursor-pointer hover:bg-base-300/50"
          phx-click="filter"
          phx-value-status="active"
        >
          <div class="stat-figure text-warning">
            <#Icon iconify="ph:clock-duotone" class="w-6 h-6" />
          </div>
          <div class="stat-title text-xs">{l("Active Jobs")}</div>
          <div class="stat-value text-lg text-warning">{@stats.active || 0}</div>
          <div class="stat-desc">{l("Running & queued")}</div>
        </div>
      </div>
      <div class="stats bg-base-200 border-base-content/10 border w-full">
        <!-- Success Rate (clickable) -->
        <div
          class="stat cursor-pointer hover:bg-base-300/50"
          phx-click="filter"
          phx-value-status="successful"
        >
          <div class="stat-figure text-success">
            <#Icon iconify="ph:check-duotone" class="w-6 h-6" />
          </div>
          <div class="stat-title text-xs">{l("Success Rate")}</div>
          <div class="stat-value text-lg text-success">{@stats.success_rate || 0}%</div>
          <div class="stat-desc">{@stats.successful || 0} {l("successful")}</div>
        </div>

        <!-- Issues (clickable) -->
        <div
          class="stat cursor-pointer hover:bg-base-300/50"
          phx-click="filter"
          phx-value-status="failed"
        >
          <div class={"stat-figure " <> if(@stats.failed > 0, do: "text-error", else: "text-base-content/40")}>
            <#Icon iconify="ph:exclamation-mark-duotone" class="w-6 h-6" />
          </div>
          <div class="stat-title text-xs">{l("Issues")}</div>
          <div class={"stat-value text-lg " <> if(@stats.failed > 0, do: "text-error", else: "text-base-content/60")}>
            {@stats.failed || 0}
          </div>
          <div class="stat-desc">{l("Need attention")}</div>
        </div>
      </div>
    </div>

    <!-- Operation Type Breakdown (clickable) -->
    <div :if={@stats.by_operation} class="my-6">
      <h3 class="text-sm font-medium text-base-content/70 mb-3">{l("Import Type")}</h3>
      <div class="stats bg-base-200 border-base-content/10 border w-full">
        <div
          :for={{operation, count} <- @stats.by_operation}
          class={"stat cursor-pointer hover:bg-base-300/50 " <> if(count == 0, do: "opacity-70", else: "")}
          phx-click="filter"
          phx-value-type={operation}
        >
          <div class={"stat-title text-xs truncate " <> if(count == 0, do: "text-base-content/60", else: "")}>
            {operation}
          </div>
          <div class={"stat-value text-sm " <> if(count == 0, do: "text-base-content/60", else: "")}>
            {count}
          </div>
          <div :if={count > 0 and @stats.active > 0} class="stat-desc">
            <button
              class="btn btn-xs btn-error btn-outline gap-1 mt-1"
              phx-click="cancel_jobs_by_type"
              phx-value-type={operation}
            >
              <#Icon iconify="heroicons:x-mark" class="w-3 h-3" />
              {l("Cancel")}
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Active Filters -->
  <div :if={@filters.type || @filters.status} class="mb-4 flex items-center gap-2">
    <span class="text-sm text-base-content/70">{l("Filters:")}</span>
    <div class="flex gap-2">
      <div :if={@filters.type} class="badge badge-outline gap-2">
        {l("Type: %{type}", type: @filters.type)}
        <button phx-click="filter" phx-value-type="" class="text-xs hover:text-error">✕</button>
      </div>
      <div :if={@filters.status} class="badge badge-outline gap-2">
        {l("Status: %{status}", status: String.capitalize(@filters.status))}
        <button phx-click="filter" phx-value-status="" class="text-xs hover:text-error">✕</button>
      </div>
      <button phx-click="clear_filters" class="btn btn-xs btn-ghost">{l("Clear all")}</button>
    </div>
  </div>

  <div :if={@jobs == []} class="text-center py-12">
    <div class="text-base-content/60">
      <#Icon iconify="heroicons:document-text" class="w-12 h-12 mx-auto mb-4 opacity-50" />
      <p class="text-lg font-medium mb-2">{l("No import history")}</p>
      <p>{if @filters.type || @filters.status,
          do: l("No imports match your current filters."),
          else: l("Your import history will appear here once you start importing data.")}</p>
    </div>
  </div>

  <div :if={@jobs != []} class="space-y-4">
    <div class="flex justify-between items-center mb-2">
      <div class="text-sm text-base-content/70">
        {l("Showing page %{page} (%{count} items)", page: @current_page, count: length(@jobs))}
      </div>

      <!-- Pagination Controls -->
      <div class="flex gap-2">
        <button :if={@current_page > 1} class="btn btn-xs btn-outline" phx-click="prev_page">
          <#Icon iconify="heroicons:chevron-left" class="w-3 h-3" />
          {l("Previous")}
        </button>

        <span class="text-xs self-center px-2 text-base-content/70">
          {l("Page %{page}", page: @current_page)}
        </span>

        <button :if={@has_more} class="btn btn-xs btn-outline" phx-click="next_page">
          {l("Next")}
          <#Icon iconify="heroicons:chevron-right" class="w-3 h-3" />
        </button>
      </div>
    </div>

    <!-- Job List -->
    <div :for={job <- @jobs} class="card bg-base-100 border border-base-content/10 shadow-sm">
      <div class="p-4 pb-0 flex items-start justify-between card-title">
        <div class="flex flex-col gap-1 mb-2 w-full">
          <div class="flex items-center gap-2 justify-between">
            <h3 class="font-semibold text-sm">{job.operation}<span :if={job[:context]}>:
                {job[:context]}</span>
            </h3>
            <div class="text-right text-xs text-base-content/50 flex items-center gap-2">
              <div class={"badge badge-sm badge-soft " <> elem(format_state(job.state), 1)}>
                {elem(format_state(job.state), 0)}
              </div>
              #{job.id}
            </div>
          </div>
          <div class="text-sm text-base-content/70 space-y-1">
            <p :if={job.identifier && !job.target_user}>
              <span class="font-medium">{l("Importing:")}</span>
              <span class="font-mono">{if is_binary(job.identifier),
                  do: job.identifier,
                  else: e(job.identifier, "object", "id", nil) || e(job.identifier, "object", nil)}</span>
            </p>

            <p class="font-normal">
              <span class="text-sm">{l("Started ")}</span>
              <time datetime={DatesTimes.format(job.inserted_at)}>{DatesTimes.date_from_now(job.inserted_at)}</time>
              <span :if={job.completed_at} class="text-sm">
                · {l("Completed ")} <time datetime={DatesTimes.format(job.completed_at)}>{DatesTimes.date_from_now(job.completed_at)}</time></span>
            </p>

            <p :if={job.attempt > 1}>
              <span class="text-sm">{l("Attempts:")}</span>
              {job.attempt} / {job.max_attempts}
            </p>
          </div>
        </div>
      </div>
      <div class="card-body p-4">
        <div class="flex items-start justify-between">
          <div class="flex-1">
            <div :if={job.target_user} class="">
              <StatelessComponent
                module={maybe_component(Bonfire.UI.Me.ProfileItemLive)}
                parent_id={deterministic_dom_id(__MODULE__, job.id, "import_history", nil)}
                character={job.target_user}
                profile={e(job.target_user, :profile, nil)}
                wrapper_class="flex items-start gap-3 profile-item group"
                avatar_class="w-12 h-12"
                show_controls={[:follow, :follows_me, :add_to_circles, :blocks]}
              />
            </div>
          </div>
        </div>

        <div :if={job.error && job.error != ""} class="mt-3 p-3 bg-error/10 rounded-lg">
          <div class="flex items-start gap-2">
            <#Icon iconify="heroicons:exclamation-triangle" class="w-4 h-4 text-error mt-0.5 flex-shrink-0" />
            <div class="text-sm">
              <p class="font-medium text-error mb-1">{l("Error:")}</p>
              <pre class="text-xs text-error/80 whitespace-pre-wrap font-mono">{job.error}</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
