<div class="flex flex-col h-full overflow-hidden write_post_content">
  <Form
    for={Bonfire.Social.Posts.LiveHandler.post_changeset(@current_user)}
    submit={handler(%{
      page: @page,
      showing_within: @showing_within,
      create_object_type: @create_object_type
    })}
    action={"/LiveHandler/" <>
      handler(%{
        page: @page,
        showing_within: @showing_within,
        create_object_type: @create_object_type
      })}
    change="validate"
    opts={
      autocomplete: "off",
      "phx-target": "#smart_input"
    }
    class={if WriteEditorLive.use_rich_editor?(e(@smart_input_opts, :wysiwyg, true), @__context__),
      do: "h-[calc(var(--visual-viewport-height)_-_110px) with_editor flex-1",
      else: "with_textarea flex-1"}
  >
    <div class={"bg-base-100 h-full flex-1"}>
      <div class={
        "relative flex flex-col flex-1 h-full"}>
        <div
          class="md:h-full flex flex-col md:min-h-[240px] h-[calc(var(--visual-viewport-height)_-_164px)] overflow-y-auto"
          :class="{'h-[calc(var(--visual-viewport-height)_-_114px)]': !title_open}"
        >
          <!-- DM RECIPIENTS -->
          <div class="relative p-2 border-b bg-base-100 border-base-content/10">
            {#if @show_select_recipients ||
                is_messaging?(%{
                  page: @page,
                  showing_within: @showing_within,
                  create_object_type: @create_object_type
                })}
              <Bonfire.UI.Common.SelectRecipientsLive
                preloaded_recipients={e(@preloaded_recipients, [])}
                to_boundaries={@to_boundaries}
                to_circles={@to_circles}
                open_boundaries={@open_boundaries}
                context_id={@context_id}
              />
            {#else}
              <div class="flex items-center w-full gap-2">
                <span class="px-1 text-xs font-medium uppercase text-base-content/70">{l("To")}</span>
                {#case clone_context(@to_boundaries)}
                  {#match false}
                  <div class="flex items-center flex-1 gap-2">
                    <Dynamic.Component
                      :if={module_enabled?(Bonfire.Boundaries.Web.SetBoundariesButtonLive)}
                      module={Bonfire.Boundaries.Web.SetBoundariesButtonLive}
                      to_boundaries={@to_boundaries}
                      preset_boundary={Bonfire.Boundaries.Web.SetBoundariesLive.boundaries_to_preset(
                        @to_boundaries
                        |> debug("to_boundaries")
                      )
                      |> debug("preset_boundary")}
                    />
                    <button type="button" phx-click={JS.toggle(to: "#boundary_picker", in: "fade-in-scale", out: "fade-out-scale")} class="rounded btn btn-ghost btn-sm btn-square">
                      <Icon iconify="carbon:subnet-acl-rules" class="w-5 h-5 text-base-content/70" />
                    </button>
                  </div>
                  {#match boundary_name}
                    <div class="flex items-center gap-2 mx">
                      <button
                        type="button"
                        class="flex items-center gap-2 normal-case rounded-full btn-ghost btn-sm btn opacity-90"
                      >
                        <span>{boundary_name}</span>
                      </button>
                    </div>
                {/case}
              </div>
            {/if}

            <div id="boundary_picker" class="hidden transition">
              <div class="flex items-center w-full gap-2 pt-2 mt-2 border-t border-base-content/10">
                <Icon iconify="carbon:subnet-acl-rules" class="w-5 h-5 mx-1 shrink-0 text-base-content/70" />
                  {#case is_messaging?(%{
                  page: @page,
                  showing_within: @showing_within,
                  create_object_type: @create_object_type
                })}
                {#match is_messaging?}
                <Dynamic.Component
                  :if={!is_messaging? and clone_context(@to_boundaries) == false and
                    module_enabled?(Bonfire.Boundaries.Web.SetBoundariesLive)}
                  module={Bonfire.Boundaries.Web.SetBoundariesLive}
                  to_boundaries={@to_boundaries}
                  preset_boundary={Bonfire.Boundaries.Web.SetBoundariesLive.boundaries_to_preset(@to_boundaries)}
                  to_circles={@to_circles}
                  open_boundaries={@open_boundaries}
                  showing_within={@showing_within}
                  create_object_type={@create_object_type}
                  thread_mode={@thread_mode}
                  boundaries_modal_id={@boundaries_modal_id}
                  context_id={@context_id}
                  hide_breakdown
                  setting_boundaries
                  click_override
                />
                {/case}
              </div>
            </div>
          </div>
          <!-- CW -->
          <div
            id="write_post_title_field"
            phx-update={if @reset_smart_input |> debug("reset_smart_input?"), do: "replace", else: "ignore"}
          >
            <Inputs for={:post_content}>
              <div
                class="relative p-2 border-b bg-base-100 border-base-content/10"
                display="style: none"
                x-show="title_open"
                x-transition
              >
                <Icon
                  iconify="fluent:chat-warning-24-regular"
                  class="absolute w-5 h-5 stroke-1 top-[14px] left-3 text-base-content/70"
                />
                <label for="title" class="sr-only">{l("Title")}</label>
                <Field name={:name}>
                  <TextInput
                    opts={
                      placeholder: l("Enter a content warning"),
                      "phx-debounce": "blur"
                    }
                    class="w-full h-8 pl-12 text-sm bg-transparent rounded input"
                  />
                </Field>
              </div>
            </Inputs>
          </div>

          <!-- UPLOADS PREVIEWS -->
          <div class={"p-2 border-b border-base-content/10 uploads_preview": @uploads.files.entries != []}>
            <Bonfire.UI.Social.UploadPreviewsLive uploads={@uploads} />
          </div>

          <!-- BODY -->
          <div
            id="write_post_body_field"
            class="flex-1"
            phx-update={if @reset_smart_input |> debug("reset_smart_input?"), do: "replace", else: "ignore"}
          >
            <Inputs for={:post_content}>
              <label for="description" class="sr-only">{l("Text")}</label>
              <Field class="flex-1 h-full grow" name={:html_body}>
                <!-- <div class={@textarea_container_class} :class={@textarea_container_class_alpine}> -->
                <WriteEditorLive
                  field_name="post[post_content][html_body]"
                  textarea_class={@textarea_class}
                  smart_input_opts={@smart_input_opts}
                  insert_text={@insert_text}
                  thread_mode={@thread_mode}
                  showing_within={@showing_within}
                />
                <!-- </div> -->
              </Field>
            </Inputs>
          </div>
        </div>
        <Bonfire.UI.Common.InputControlsLive
          preloaded_recipients={e(@preloaded_recipients, [])}
          open_boundaries={@open_boundaries}
          show_select_recipients={@show_select_recipients}
          boundaries_modal_id={@boundaries_modal_id}
          smart_input_opts={@smart_input_opts}
          thread_mode={@thread_mode}
          reply_to_id={id(@reply_to_id)}
          context_id={@context_id}
          create_object_type={@create_object_type}
          to_boundaries={@to_boundaries}
          to_circles={@to_circles}
          showing_within={@showing_within}
          uploads={@uploads}
          uploaded_files={@uploaded_files}
          show_cw_toggle
        />
      </div>
    </div>
  </Form>
</div>
