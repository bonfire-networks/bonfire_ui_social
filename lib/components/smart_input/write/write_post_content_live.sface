<div class="flex flex-col h-full overflow-hidden write_post_content">
  <Form
    for={Bonfire.Social.Posts.LiveHandler.post_changeset(@current_user)}
    submit={JS.push(handler(@create_object_type)) |> Bonfire.UI.Common.SmartInput.LiveHandler.minimize()}
    action={"/LiveHandler/" <> handler(@create_object_type)}
    change="validate"
    opts={
      autocomplete: "off",
      "phx-target": "#smart_input"
    }
    class={if WriteEditorLive.use_rich_editor?(e(@smart_input_opts, :wysiwyg, true), @__context__),
      do: "h-[calc(var(--visual-viewport-height)_-_110px) with_editor flex-1",
      else: "with_textarea flex-1"}
  >
    <div class="flex-1 h-full bg-base-300">
      <div id="write_post_content_wrapper">
        <div class="relative !flex flex-col flex-1 h-full">
          <span>
            <svg
              class="loader absolute z-[99999999999999999999999999999] w-20 h-20 left-1/2 top-1/2 mt-[-5rem] ml-[-2.5rem] stroke-1 text-base-content/90 hidden"
              version="1.1"
              id="L9"
              xmlns="http://www.w3.org/2000/svg"
              xmlns:xlink="http://www.w3.org/1999/xlink"
              x="0px"
              y="0px"
              viewBox="0 0 100 100"
              enable-background="new 0 0 0 0"
              xml:space="preserve"
            >
              <path
                fill="#fff"
                d="M73,50c0-12.7-10.3-23-23-23S27,37.3,27,50 M30.9,50c0-10.5,8.5-19.1,19.1-19.1S69.1,39.5,69.1,50"
              >
                <animateTransform
                  attributeName="transform"
                  attributeType="XML"
                  type="rotate"
                  dur="1s"
                  from="0 50 50"
                  to="360 50 50"
                  repeatCount="indefinite"
                />
              </path>
            </svg>
          </span>
          <div
            class="md:h-full flex flex-col md:min-h-[240px] h-[calc(var(--visual-viewport-height)_-_164px)] overflow-y-auto"
            :class="{'h-[calc(var(--visual-viewport-height)_-_114px)]': !title_open}"
          >
            <!-- DM RECIPIENTS -->
            <div class="relative bg-base-300">
              {#if @show_select_recipients || @create_object_type == :message}
                <Bonfire.UI.Common.SelectRecipientsLive
                  preloaded_recipients={e(@preloaded_recipients, [])}
                  to_boundaries={@to_boundaries}
                  to_circles={@to_circles}
                  open_boundaries={@open_boundaries}
                  context_id={@context_id}
                />
              {#else}
                <div>
                  <div class="flex items-center px-2 gap-3 text-base md:text-sm text-base-content/80">
                    <!-- <Bonfire.UI.Common.AvatarLive
                      :if={is_map(current_user(@__context__))}
                      parent_id="nav_sidebar"
                      class="inline-block object-cover w-10 h-10 rounded-full cursor-pointer bg-base-100"
                      bg_class="rounded"
                      size="40"
                      user={current_user(@__context__)}
                    /> -->
                    <div class="flex items-center w-full">
                      <!-- <span class="px-1 text-xs font-medium uppercase text-base-content/70">{l("To")}</span> -->
                      {#case clone_context(@to_boundaries)}
                        {#match false}
                          <div class="flex items-center flex-1 gap-2">
                            <Dynamic.Component
                              :if={module_enabled?(Bonfire.Boundaries.Web.SetBoundariesButtonLive)}
                              module={Bonfire.Boundaries.Web.SetBoundariesButtonLive}
                              to_boundaries={@to_boundaries}
                              preset_boundary={Bonfire.Boundaries.Web.SetBoundariesLive.boundaries_to_preset(
                                @to_boundaries
                                |> debug("to_boundaries")
                              )
                              |> debug("preset_boundary")}
                            />
                          </div>
                        {#match boundary_name}
                          <div class="flex items-center gap-2 mx">
                            <button
                              type="button"
                              class="flex items-center gap-2 normal-case rounded-full btn-ghost btn-sm btn opacity-90"
                            >
                              <span>{boundary_name}</span>
                            </button>
                          </div>
                      {/case}
                    </div>
                    <!-- <div class="flex flex-col items-start">
                  <div class="text-sm font-semibold truncate max-w-[180px] text-base-content">{e(current_user(@__context__), :profile, :name, l("Me"))}</div>
                  <div
                    :if={e(current_user(@__context__), :character, :username, nil)}
                    class="-mt-0.5 text-[13px] font-normal truncate text-base-content/70"
                  >@{e(current_user(@__context__), :character, :username, nil)}</div>
                </div> -->
                  </div>

                  <div id="custom_boundaries" class="hidden flex px-2 mt-2 items-center gap-2">
                    {#for acl <-
                        Bonfire.Boundaries.Acls.list_my(current_user(@__context__))
                        |> Enum.map(fn
                          %Bonfire.Data.AccessControl.Acl{} = acl ->
                            %{
                              id: e(acl, :id, nil),
                              field: :to_boundaries,
                              description: e(acl, :extra_info, :summary, nil),
                              name: e(acl, :named, :name, nil) || e(acl, :sterotyped, :named, :name, nil)
                            }
                        end)
                        |> Enum.filter(fn acl -> acl[:name] != nil end)}
                      <button
                        type="button"
                        phx-click={JS.push("Bonfire.Boundaries:select_boundary",
                          value: %{id: e(acl, :id, nil), name: e(acl, :name, nil)},
                          target: "#smart_input"
                        )}
                        class={
                          "badge !h-[1.5rem] badge-outline border-base-content/50",
                          "badge-primary": e(acl, :name, "") in @to_boundaries
                        }
                      >{e(acl, :name, nil)}</button>
                    {/for}
                  </div>
                </div>
              {/if}
            </div>

            <!-- CW -->
            <div
              x-show="title_open"
              x-cloak
              :if={Config.get([:ui, :smart_input, :cw], []) == true}
              id="write_post_title_field"
              phx-update={if @reset_smart_input |> debug("reset_smart_input?"), do: "replace", else: "ignore"}
            >
              <Inputs for={:post_content}>
                <div class="relative p-2 border-b bg-base-300 border-base-content/10">
                  <#Icon
                    iconify="ri:alarm-warning-line"
                    class="absolute w-5 h-5 stroke-1 top-[14px] left-3 text-base-content/70"
                  />
                  <label for="title" class="sr-only">{l("Title")}</label>
                  <Field name={:name}>
                    <TextInput
                      opts={
                        placeholder: l("Enter a content warning"),
                        "phx-debounce": "blur"
                      }
                      class="w-full h-8 pl-12 text-sm bg-transparent rounded input"
                    />
                  </Field>
                </div>
              </Inputs>
            </div>

            <!-- UPLOADS PREVIEWS -->
            <div class={"p-2 border-b border-base-content/10 uploads_preview": @uploads.files.entries != []}>
              <Bonfire.UI.Social.UploadPreviewsLive uploads={@uploads} />
            </div>

            <!-- BODY -->
            <div
              id="write_post_body_field"
              class="flex-1 break-words"
              phx-update={if @reset_smart_input |> debug("reset_smart_input?"), do: "replace", else: "ignore"}
            >
              <Inputs for={:post_content}>
                <label for="description" class="sr-only">{l("Text")}</label>
                <Field class="flex-1 h-full grow" name={:html_body}>
                  <!-- <div class={@textarea_container_class} :class={@textarea_container_class_alpine}> -->
                  <WriteEditorLive
                    field_name="post[post_content][html_body]"
                    textarea_class={@textarea_class}
                    smart_input_opts={@smart_input_opts}
                    insert_text={@insert_text}
                    showing_within={@showing_within}
                  />
                  <!-- </div> -->
                </Field>
              </Inputs>
            </div>
          </div>
          <Bonfire.UI.Common.InputControlsLive
            preloaded_recipients={e(@preloaded_recipients, [])}
            open_boundaries={@open_boundaries}
            show_select_recipients={@show_select_recipients}
            boundaries_modal_id={@boundaries_modal_id}
            smart_input_opts={@smart_input_opts}
            reply_to_id={id(@reply_to_id)}
            context_id={@context_id}
            create_object_type={@create_object_type}
            to_boundaries={@to_boundaries}
            to_circles={@to_circles}
            showing_within={@showing_within}
            uploads={@uploads}
            uploaded_files={@uploaded_files}
            show_cw_toggle
          />
        </div>
      </div>
      <div class="hidden" id="extra_boundaries">
        <div class="flex flex-col h-full overflow-hidden">
          <!-- <div id="boundary_picker" class="hidden transition"> -->
          <Dynamic.Component
            :if={@create_object_type != :message and clone_context(@to_boundaries) == false and
              module_enabled?(Bonfire.Boundaries.Web.SetBoundariesLive)}
            module={Bonfire.Boundaries.Web.SetBoundariesLive}
            to_boundaries={@to_boundaries}
            preset_boundary={Bonfire.Boundaries.Web.SetBoundariesLive.boundaries_to_preset(@to_boundaries)}
            to_circles={@to_circles}
            open_boundaries={@open_boundaries}
            showing_within={@showing_within}
            create_object_type={@create_object_type}
            boundaries_modal_id={@boundaries_modal_id}
            context_id={@context_id}
            hide_breakdown
            setting_boundaries
            click_override
          />
          <!-- </div> -->
        </div>
      </div>
    </div>
  </Form>
</div>
