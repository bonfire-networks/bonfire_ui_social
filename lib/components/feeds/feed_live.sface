<div
  id={@id}
  data-id="feed"
  role="feed"
  aria-live="assertive"
  aria-atomic="true"
  class={
    "w-full feed  flex-1 h-full grow",
    "!max-w-[680px] mx-auto": !current_user(@__context__)
  }
>
  <div class="">
    <Bonfire.UI.Common.TabsLive
      :if={@hide_tabs != true}
      selected_tab={@selected_tab}
      class={@tabs_class}
      tab_class={@tab_class}
      tab_primary_class={@tab_primary_class}
      link_component={@tab_link_component}
      tabs={tabs(current_user(@__context__), @__context__[:current_params]["object_type"])}
      event_handler={@event_handler}
      event_target={@myself}
      path_prefix={@tab_path_prefix}
      path_suffix={@tab_path_suffix}
    />
    {#if @feed_count || e(@streams, :feed, :inserts, []) != []}
      <div
        id={"feed-#{@feed_id || @id}"}
        data-id="feed_activity_list"
        phx-update="stream"
        class="flex flex-col divide-y divide-base-content/10"
      >
        <!-- phx-update={e(@feed_update_mode, "append")} -->
        {#for {entry_id, entry} <- @streams.feed}
          <!-- id={"f-#{@feed_id || @id}-a-#{i}"} -->
          <div
            id={entry_id}
            :if={@hide_activities != "component"}
            class={if @hide_activities == "infinite_scroll", do: "infinite_scroll_hidden hidden"}
          >
            <!-- id={"activity-#{component_id(@feed_id || @id, entry)}"} -->
            <ActivityLive
              id={"activity-#{entry_id}"}
              activity={get_activity(entry)}
              showing_within={@showing_within}
              verb_default={@verb_default}
              feed_id={@feed_id}
              hide_activity={@hide_activities}
            />
          </div>
        {/for}
      </div>

      <div :if={@bottom_or_empty_feed} class="mt-1 mb-2 text-center text-base-content">
        <#slot {@bottom_or_empty_feed}>
        </#slot>
      </div>
    {#elseif is_list(@feed) and @feed != []}
      <div
        id={"feed-#{@feed_id || @id}"}
        data-id="feed_activity_list"
        phx-update="append"
        class="flex flex-col divide-y divide-base-content/10"
      >
        <!-- phx-update={e(@feed_update_mode, "append")} -->
        {#for {entry, i} <- Enum.with_index(@feed)}
          <!-- id={"f-#{@feed_id || @id}-a-#{i}"} -->
          <div id={"f-#{@feed_id || @id}-a-#{i}"} :if={@hide_activities != "component"}>
            <ActivityLive
              id={"activity-#{component_id(@feed_id || @id, entry)}"}
              activity={get_activity(entry)}
              showing_within={@showing_within}
              verb_default={@verb_default}
              feed_id={@feed_id}
              hide_activity={@hide_activities}
            />
          </div>
        {/for}
      </div>

      <div :if={@bottom_or_empty_feed} class="mt-1 mb-2 text-center text-base-content">
        <#slot {@bottom_or_empty_feed}>
        </#slot>
      </div>
    {#else}
      {#if @loading}
        <div class="flex flex-col items-center gap-3 py-12 place-content-center">
          <img src={Bonfire.Web.Endpoint.static_path("/images/loading.svg")}>
          <div class="sr-only text-base-content">{l("Loading...")}</div>
        </div>
        <!-- {#case maybe_cute_gif()}
          {#match url when is_binary(url)}
            <div class="flex flex-row items-center justify-center my-12">
              <img src={url}>
            </div>
          {#match _}
        {/case} -->
      {#else}
        <div data-id="empty-feed" class="flex items-center place-content-center">
          <Bonfire.UI.Common.EmptyFeed
            feedback_title={@feedback_title}
            feedback_message={@feedback_message}
            empty_feed={@bottom_or_empty_feed}
          />
        </div>
      {/if}
    {/if}

    <Bonfire.UI.Common.LoadMoreLive
      :if={@page_info && e(@hide_load_more, false) != true}
      live_handler={Bonfire.Social.Feeds}
      page_info={@page_info}
      target={@myself}
      infinite_load
      context={@id}
      entry_count={@feed_count}
    />
  </div>
</div>
