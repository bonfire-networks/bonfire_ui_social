<div>
  <div
    id={@id}
    data-id="feed"
    role="feed"
    aria-live="assertive"
    phx-hook="Bonfire.UI.Common.PreviewContentLive#MainFeed"
    aria-atomic="true"
    class="w-full flex flex-col feed lg:rounded-xl lg:shadow bg-base-100 mx-auto"
  >
    <div :if={!@hide_filters and current_user_id(@__context__)} id="feed_controls_wrapper">
      <StatelessComponent
        module={Bonfire.UI.Social.FeedControlsLive}
        event_target={@myself}
        feed_id={@feed_id}
        feed_name={@feed_name}
        feed_filters={@feed_filters}
        showing_within={@showing_within}
        reloading={@reloading}
      />
    </div>

    <div class="flex flex-col h-full grow break-all w-full max-w-full">
      {!-- TODO: show tabs at top of persistent feed and use event handler to trigger switching feed within the component rather than patch the view? --}
      {!-- type={if @feed_name in [nil, :my], do: :header_only} --}
      {!-- "h-[56px]": @feed_name in [nil, :my] --}
      {!-- <Bonfire.UI.Common.TabsLive
      :if={!@hide_filters}
      selected_tab={@selected_tab}
      selected_name={@feed_title || @page_title}
      class="flex items-center gap-2 w-full tabs border-b border-base-content/10"
      tab_class={@tab_class}
      item_class={@item_class}
      tab_primary_class={@tab_primary_class}
      link_component={@tab_link_component}
      tabs={tabs(@top_page, @__context__)}
      event_handler={@event_handler}
      event_target={@myself}
      path_prefix={@tab_path_prefix}
      path_suffix={@tab_path_suffix}
      show_back_button={@show_back_button}
    ></Bonfire.UI.Common.TabsLive> --}

      {!-- :if={@feed_name in [nil, :my, :local, :remote, :explore] and current_user_id(@__context__)} --}

      <div
        :if={@hide_fresh != 0}
        id="show_fresh"
        @click="window.scrollTo({top: 0, behavior: 'smooth'})"
        phx-click={JS.show(to: ".fresh_hidden")
        |> JS.add_class("hidden")}
        class="flex justify-center w-full p-3 mx-auto absolute z-[99999999999999]"
        phx-show={JS.remove_class("hidden")}
      >
        {!-- style={if @hide_fresh==0, do: "display: none;", else: ""} --}
        <btn class="normal-case btn btn-sm btn-primary">
          <#Icon iconify="mdi:arrow-up" class="w-4 h-4" />
          {!-- |> JS.push("hide_fresh", target: @myself) --}
          {l("Show more recent")}
          {!-- {"(#{@hide_fresh})"} --}
        </btn>
      </div>

      {#if is_list(@feed) and @feed != []}
        <div
          id={"feed_#{@feed_name || @feed_id || @id}"}
          data-id="feed_activity_list"
          phx-update="append"
          class="flex flex-col divide-y divide-base-content/10"
        >
          {!-- phx-update={e(@feed_update_mode, "append")} --}
          {#for {entry, i} <- Enum.with_index(@feed)}
            <div id={"f_#{@feed_id || @id}_a_#{i}"} :if={@hide_activities != "component"}>
              <ActivityLive
                id={ActivityLive.component_id(
                  id(entry) || e(entry, :activity, :id, nil) || e(entry, :object, :id, nil) ||
                    e(entry, :edge, :id, nil),
                  "f_activity_#{@feed_name || @feed_id || @id}_#{i}"
                )}
                activity={get_activity(entry)}
                showing_within={@showing_within}
                hide_actions={@hide_actions}
                custom_preview={e(@custom_preview, nil)}
                verb_default={@verb_default}
                feed_name={@feed_name}
                feed_id={@feed_id || @feed_ids}
                is_remote={@feed_name in [:remote]}
                hide_activity={@hide_activities}
                class={@activity_class}
                subject_user={@subject_user}
                activity_preloads={@activity_preloads}
              />
            </div>
          {/for}
        </div>
      {#elseif is_map(@streams) and is_struct(@streams.feed)}
        <div
          id={"feed_#{@feed_name || @feed_id || @id}"}
          data-id="feed_activity_list"
          phx-update="stream"
          class="flex flex-col divide-y divide-base-content/10 flex-1 h-full grow"
        >
          {!-- phx-update={e(@feed_update_mode, "append")} --}
          {#for {entry_id, entry} <- @streams.feed}
            {!-- id={"f-#{@feed_id || @id}-a-#{i}"} --}
            <div
              id={entry_id}
              :if={@hide_activities != "component"}
              class={
                "activity_wrapper w-full max-w-full",
                "infinite_scroll_hidden hidden": @hide_activities == "infinite_scroll",
                "fresh_hidden hidden": @hide_fresh != 0
              }
            >
              {!-- id={"activity-#{component_id(@feed_id || @id, entry)}"} --}
              <ActivityLive
                id={ActivityLive.component_id(
                  id(entry) || e(entry, :activity, :id, nil) || e(entry, :object, :id, nil) ||
                    e(entry, :edge, :id, nil),
                  "s_activity_#{entry_id}"
                )}
                activity={get_activity(entry)}
                custom_preview={e(@custom_preview, nil)}
                showing_within={@showing_within}
                verb_default={@verb_default}
                feed_name={@feed_name}
                feed_id={@feed_id || @feed_ids}
                class={@activity_class}
                is_remote={@feed_name in [:remote]}
                hide_activity={@hide_activities}
                subject_user={@subject_user}
                activity_preloads={@activity_preloads}
              />
            </div>
          {/for}
        </div>
      {/if}

      {!-- Pagination: --}

      {!-- # TODO: put these in a prepare function instead of so many cases in the markup --}
      {#case LoadMoreLive.end_cursor(@page_info)}
        {#match end_cursor}
          {#case LoadMoreLive.end_cursor(@previous_page_info) ||
              e(@__context__, :current_params, "Elixir.Bonfire.Social.Feeds", "after", nil) ||
              e(@__context__, :current_params, "after", nil)}
            {#match previous_end_cursor}
              {#case LoadMoreLive.final_cursor(@page_info) || LoadMoreLive.final_cursor(@previous_page_info)}
                {#match final_end_cursor}
                  {#case (Config.get([Bonfire.Social.Feeds, :query_with_deferred_join], true,
                       name: l("Use Deferred Joins"),
                       description: l("Technical setting for query performance optimization.")
                     ) &&
                       !@deferred_join_multiply_limit) or @deferred_join_multiply_limit < 4}
                    {#match query_with_deferred_join?}
                      {#case Settings.get([:ui, :infinite_scroll], :preload,
                          context: @__context__,
                          name: l("Infinite Scrolling"),
                          description: l("Enable infinite scrolling in feeds, or choose a hybrid approach.")
                        )}
                        {#match infinite_scroll}
                          {#case Types.maybe_to_integer(e(@feed_filters, :time_limit, nil), 0)}
                            {#match time_limit}
                              {!-- context={@id} 
          cursor={end_cursor ||
if previous_end_cursor && query_with_deferred_join?,
          do: previous_end_cursor}
    --}
                              <LoadMoreLive
                                :if={!@hide_load_more}
                                live_handler={Bonfire.Social.Feeds}
                                page_info={@page_info}
                                cursor={end_cursor ||
                                  if query_with_deferred_join?, do: final_end_cursor || previous_end_cursor}
                                infinite_scroll={infinite_scroll}
                                target={@myself}
                                entry_count={@feed_count}
                                current_url={append_params_uri(
                                  @current_url || @__context__[:current_url],
                                  %{"#{Bonfire.Social.Feeds}[time_limit]" => time_limit}
                                )}
                                multiply_limit={if query_with_deferred_join?,
                                  do: (@deferred_join_multiply_limit || 2) * 2,
                                  else: @deferred_join_multiply_limit}
                              >
                                <:if_no_more>
                                  {#if time_limit != 0}
                                    <p class="text-sm py-4 mt-4 text-center text-base-content/50 font-medium">{lp(
                                        "That's all for today...",
                                        "That's all for the last %{number} days...",
                                        time_limit,
                                        number: time_limit
                                      )}</p>
                                  {#else}
                                    {!-- {#if is_nil(@previous_page_info)} --}
                                    {#if @loading}
                                      <div class="flex flex-col items-center gap-3 py-12 place-content-center">
                                        {#if user_socket_connected?(@__context__) && @cute_gif}
                                          <div class="flex flex-row items-center justify-center my-12">
                                            <img src={@cute_gif}>
                                          </div>
                                        {#else}
                                          <img src={Bonfire.Common.URIs.static_path("/images/loading.svg")}>
                                        {/if}

                                        <div class="sr-only text-base-content">{l("Loading...")}</div>
                                      </div>
                                    {#elseif not is_integer(@feed_count) or @feed_count == 0 or !(is_list(@feed) and @feed != [])}
                                      <div data-id="empty-feed" class="flex items-center place-content-center">
                                        <Bonfire.UI.Common.EmptyFeed
                                          feed_name={@feed_name}
                                          feedback_title={@feedback_title}
                                          feedback_message={@feedback_message}
                                        />
                                        {!-- empty_feed={@bottom_or_empty_feed} --}
                                      </div>
                                    {#else}
                                      <img
                                        class="max-w-[220px] opacity-80 mx-auto"
                                        src={Bonfire.Common.URIs.static_path("/images/bonfire-exausted.png")}
                                      />
                                      <p class="text-sm font-medium text-base-content/70 text-center my-4">{l("That's all folks...")}</p>
                                    {/if}
                                  {/if}

                                  {#if !@loading |> debug("loaad") and time_limit != 0}
                                    {#if user_socket_connected?(@__context__) |> debug("soo")}
                                      {#if ((debug(end_cursor, "ecc") || previous_end_cursor |> debug("pec") || final_end_cursor)
                                         |> debug("acc") && !debug(e(@feed_filters, :sort_by, nil), "sbb")) ||
                                          e(@feed_filters, :sort_by, nil) == :date_created}
                                        {!-- we are sorting by date and can simply continue paginating but with no limit --}
                                        {!-- TODO: instead of switching to infinity, switch 1 level up from current limit, eg. from 1 week to 1 month --}
                                        <LoadMoreLive
                                          live_handler={Bonfire.Social.Feeds}
                                          page_info={@page_info || @previous_page_info}
                                          cursor={end_cursor || previous_end_cursor || final_end_cursor}
                                          infinite_scroll={infinite_scroll}
                                          target={@myself}
                                          hide_guest_fallback={@hide_guest_fallback}
                                          label={l("Show older activities")}
                                          opts={%{"phx-value-time_limit" => 0}}
                                          hide_if_no_more
                                          current_url={@current_url}
                                        />
                                      {#else}
                                        {!-- do we need to reload the feed if not sorting by date? --}
                                        <div class="w-full flex items-center justify-center mb-4">
                                          <button
                                            data-id="load_all_time"
                                            class="normal-case btn btn-soft btn-primary"
                                            phx-click="set_filter"
                                            phx-value-time_limit={0}
                                            phx-target={@myself}
                                            phx-disable-with={l("Loading...")}
                                          >
                                            {l("Show all activities (with no time limit)")}
                                          </button>
                                        </div>
                                      {/if}
                                    {#else}
                                      {!-- no socket connected --}
                                      <div class="w-full flex items-center justify-center mb-4">
                                        <a
                                          :if={!@hide_guest_fallback}
                                          data-id="load_all_time"
                                          class="normal-case btn btn-primary btn-soft btn-wide"
                                          href={append_params_uri(
                                            @current_url || @__context__[:current_url],
                                            time_limit: 0,
                                            after: end_cursor || previous_end_cursor || final_end_cursor
                                          )}
                                        >
                                          {l("Show older activities")}
                                        </a>
                                      </div>
                                    {/if}
                                  {/if}

                                  <div :if={@bottom_or_empty_feed} class="mt-1 mb-2 text-center text-base-content">
                                    <#slot {@bottom_or_empty_feed}>
                                    </#slot>
                                  </div>
                                </:if_no_more>
                              </LoadMoreLive>
                          {/case}
                      {/case}
                  {/case}
              {/case}
          {/case}
      {/case}
    </div>
  </div>
</div>