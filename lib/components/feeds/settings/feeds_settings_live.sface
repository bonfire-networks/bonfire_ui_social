<div class="flex flex-col">
  <div class="flex flex-col gap-1 py-6 p-4">
    <div class="text-xl font-semibold">{l("Feed Control")}</div>
    <div class="text-base-content/70">{l(
        "Customize your feed experience by configuring default display settings and managing which feed presets appear in your sidebar navigation."
      )}</div>
  </div>

  <div class="border border-base-content/20 rounded-box m-3 my-0 bg-base-200/50">
    <div>
      <div class="p-4 text-lg font-bold flex items-center gap-4 border-b border-base-content/10">
        <#Icon iconify="ph:list-bullets-duotone" class="w-6 h-6 text-primary" />
        <span>{l("Default settings")}</span>
      </div>
    </div>

    <div class="bg-base-100 divide-y divide-base-content/10">
      <form data-scope="time_limit" class="p-4" phx-change="Bonfire.Common.Settings:set">
        <label for="set_default_time_limit" class="sr-only">{l("Set default time limit")}</label>
        <Bonfire.UI.Common.SettingsSelectLive
          keys={[Bonfire.UI.Social.FeedLive, :time_limit]}
          options={%{1 => l("Day"), 7 => l("Week"), 30 => l("Month"), 365 => l("Year"), 0 => l("All time")}}
          default_value={nil}
          name={l("Time limit")}
          description={l(
            "Select the time limit you want to use by default (can always change in the feed controls options)"
          )}
          scope={@scope}
        />
      </form>

      <!-- <div class="p-4 flex flex-col lg:flex-row lg:items-center gap-4 justify-between"> -->
      <!-- <div class="flex items-center justify-between gap-4">
        <div class="flex flex-col gap-1">
          <div class="text-sm font-medium">{l("Default sort")}</div>
          <div class="text-sm font-light text-base-content/70">{l(
              "Select the default sorting options for your feeds (can always change in the feed controls options)"
            )}</div>
        </div>
      </div> -->
      <form data-scope="reactions_sort" class="p-4" phx-change="Bonfire.Common.Settings:set">
        <Bonfire.UI.Common.SettingsSelectLive
          keys={[Bonfire.UI.Social.FeedLive, :sort_by]}
          label_name={l("Sort by")}
          id="set_default_sort"
          options={if extension_enabled?(:bonfire_ui_reactions, @__context__),
            do: [
              false: l("Chronological"),
              num_replies: l("Amount of replies"),
              num_boosts: l("Amount of boosts"),
              num_likes: l("Amount of likes")
            ],
            else: [
              false: l("Chronological"),
              num_replies: l("Amount of replies")
            ]}
          default_value={false}
          current_value={:load_from_settings}
          name={l("Default sort")}
          description={l(
            "Select the default sorting options for your feeds (can always change in the feed controls options)"
          )}
          scope={@scope}
        />
      </form>
      <!-- <StatelessComponent
        module={maybe_component(Bonfire.UI.Social.SortItemsLive, @__context__)}
        scope={@scope}
      /> -->
      <!-- </div> -->

      <form phx-change="Bonfire.Common.Settings:set">
        <Bonfire.UI.Common.Settings.NumberLive
          scope={@scope}
          name={l("How many items to show in feeds and other lists")}
          keys={[:default_pagination_limit]}
          unit={l("items")}
        />
        {!-- name={l("How many items to show in feeds and other lists (maximum %{number})", number: Config.get(:pagination_hard_max_limit, 500))} --}
      </form>

      <div x-data="{open: false}" class="p-4 cursor-pointer rounded-b-box">
        <div x-on:click="open = !open" class="flex items-center justify-between gap-4">
          <div class="flex flex-col gap-1">
            <div
              :if={Settings.get([:ui, :infinite_scroll], :preload,
                context: @__context__,
                name: l("Infinite Scrolling"),
                description: l("Enable infinite scrolling in feeds.")
              ) == true}
              class="badge mb-2 !border !border-warning/30 badge-outline badge-warning"
            >{l("Dark Pattern")}</div>
            <div class="text-sm font-medium">{l("Infinite scrolling")}</div>
            <!-- <div class="text-sm font-light text-base-content/70">{l("Infinite scrolling")}</div> -->
          </div>
          {!-- Alpinejs: If open is true, set x-text to "Expand", otherwise set to "Collapse" --}
          <button type="button" x-cloak class="btn btn-circle btn-sm btn-ghost" x-show="open">
            <#Icon iconify="ph:caret-down-duotone" class="w-4 h-4 text-base-content/70" />
          </button>
          <button type="button" class="btn btn-circle btn-sm btn-ghost" x-show="!open">
            <#Icon iconify="ph:caret-up-duotone" class="w-4 h-4 text-base-content/70" />
          </button>
        </div>
        <div x-show="open" x-cloak x-collapse class="pt-2">
          <form phx-change="Bonfire.Common.Settings:set">
            <Bonfire.UI.Common.SettingsRadiosLive
              keys={[:ui, :infinite_scroll]}
              options={[
                preload: l("Pre-load extra activities, but require clicking on 'Show more' to see them"),
                true: l("Enable doom scrolling"),
                false: "Disable"
              ]}
              default_value={:preload}
              scope={@scope}
            />
          </form>
        </div>
      </div>
    </div>
  </div>
  <div class="border border-base-content/20 rounded-box m-3 bg-base-200/50">
    <div>
      <div class="p-4 text-lg font-bold flex items-start gap-4 border-b border-base-content/10">
        <#Icon iconify="ph:list-star-duotone" class="w-6 h-6 text-primary" />
        <div>
          <div>{l("Feed presets")}</div>
          <div class="text-sm font-normal text-base-content/70">{l("Decide which feed you want to show in your sidebar.")}</div>
        </div>
      </div>
    </div>

    <ul class="flex flex-col bg-base-100 menu-sm w-full">
      {#for {preset, index} <- Enum.with_index(@presets || [])}
        <li class="relative border-b border-base-content/10">
          {!-- TODO? Draggable handle outside Alpine component --}
          {!-- <div
                data-sortable-handler
                class="absolute left-0 top-0 bottom-0 w-23 flex items-center place-content-center border-r border-base-content/10"
              >
                <#Icon iconify="ic:baseline-drag-indicator" class="w-5 h-5" />
              </div> --}

          <div class="flex-col items-start flex w-full p-3">
            <div class="flex gap-3 lg:items-center flex-1 w-full justify-between">
              <div class="flex flex-1 items-center gap-3">
                <div class="flex items-center gap-3">
                  <Iconify.iconify icon={preset[:icon] || "ic:baseline-rss-feed"} class="w-7 h-7 opacity-70" />
                  <div class="flex flex-col gap-0 flex-1">
                    <div class="font-medium text-sm">{preset[:name] || preset[:description] || preset.id}</div>
                    <div class="text-sm text-base-content/70">{preset[:description]}</div>
                  </div>
                  {!-- <div class="text-xs text-base-content/50 mt-1 flex gap-2 flex-wrap">
                        {#if preset[:current_user_required]}
                          <span class="badge badge-info badge-soft badge-sm">{l("Requires login")}</span>
                        {/if}
                        {#if preset[:filters][:feed_name]}
                          <span class="badge badge-sm badge-secondary badge-soft">{preset.filters.feed_name}</span>
                        {/if}
                        {#if preset[:filters][:creators]}
                          <span class="badge badge-sm badge-info badge-soft">By: {Enum.join(preset.filters.creators, ", ")}</span>
                        {/if}
                        {#if preset[:filters][:media_types]}
                          <span class="badge badge-sm badge-info badge-soft">Media: {Enum.join(preset.filters.media_types, ", ")}</span>
                        {/if}
                      </div> --}
                </div>
              </div>
              <div class="flex items-center gap-2">
                <!-- TODO: enable subscribing to feeds that require auth, maybe by generating a single-use token? -->
                <div :if={!preset[:current_user_required] and
                  module_enabled?(Bonfire.UI.Social.SubscribeFeedLive, @__context__)}>
                  <Bonfire.UI.Social.SubscribeFeedLive feed_name={preset.id} as_icon />
                </div>
                <button
                  :if={!preset[:built_in]}
                  phx-click="Bonfire.Social.Feeds:preset_delete"
                  phx-value-id={preset.id}
                  class="btn btn-circle btn-error btn-sm btn-ghost"
                >
                  <#Icon iconify="ph:trash-bold" class="w-4 h-4" />
                  <span class="sr-only">{l("Delete")}</span>
                </button>
                {#if preset[:exclude_from_nav] == false}
                  <button
                    phx-click="Bonfire.Social.Feeds:preset_nav_toggle"
                    phx-value-id={preset.id}
                    phx-value-exclude="true"
                    class=""
                  >
                    <input type="checkbox" checked class="checkbox checkbox-primary">
                    <span class="sr-only">{l("Include in the sidebar")}</span>
                  </button>
                {#else}
                  <button
                    phx-click="Bonfire.Social.Feeds:preset_nav_toggle"
                    phx-value-id={preset.id}
                    phx-value-exclude="false"
                    class=""
                  >
                    <input type="checkbox" class="checkbox checkbox-primary">
                    <span class="sr-only">{l("Include in the sidebar")}</span>
                  </button>
                {/if}
                {!-- <form phx-change="Bonfire.Social.Feeds:preset_nav_toggle" phx-value-id={preset.id}>
                      <label>
                        <input type="checkbox" name="show_in_nav" checked={preset[:exclude_from_nav] == false}>
                        <span>{l("Show in navigation menu")}</span>
                      </label>
                    </form> --}
              </div>
            </div>
          </div>
        </li>
      {/for}
    </ul>
  </div>
  <!-- </div>
    </div> -->

  {!-- <form phx-change="Bonfire.Common.Settings:set">
      <Bonfire.UI.Common.SettingsToggleLive
        name={l("Simplified feed filters")}
        description={l(
          "Simplified feed controls are more compact and allow switching between different types of activities, but you can still expand the full feed controls to show all options and filters."
        )}
        keys={[Bonfire.UI.Social, :use_lite_feed_controls]}
        scope={@scope}
        default_value={Settings.get([Bonfire.UI.Social, :use_lite_feed_controls], true, context: @__context__)}
      />
    </form> --}

  {!-- <div
      :if={Settings.get([Bonfire.UI.Social, :use_lite_feed_controls], true, context: @__context__)}
      x-data="{open: false}"
      class="p-4"
    >
      <div x-on:click="open = !open" class="flex items-center justify-between gap-4 cursor-pointer">
        <div class="flex flex-col gap-1">
          <div class="text-sm font-medium">{l("Activity and content types")}</div>
          <div class="text-sm font-light text-base-content/70">{l("Here you can decide which activity and content types you want to include in your feed control tab")}</div>
        </div>

        <button type="button" x-cloak class="btn btn-circle btn-sm btn-ghost" x-show="open">
          <#Icon iconify="ph:caret-down-duotone" class="w-4 h-4 text-base-content/70" />
        </button>
        <button type="button" class="btn btn-circle btn-sm btn-ghost" x-show="!open">
          <#Icon iconify="ph:caret-up-duotone" class="w-4 h-4 text-base-content/70" />
        </button>
      </div>
      <div x-show="open" x-cloak x-collapse>
      </div>
    </div> --}
  <!-- </div> -->
</div>